#!/bin/bash

size=30

function is_floating {
    bspc query -T -n | grep -q '"state":"floating"'
}

# if current node is floating, focus the newest non-floating node
# otherwise focus the newest floating node
function focus_toggle_floating {
    if is_floating; then
        bspc node newest.!floating --focus
    else
        bspc node newest.floating --focus
    fi
}

# if current node is floating, focus $dir{west,south,north,east} floating node
# otherwise focus $dir{west,south,north,east} non-floating node
function focus {
    local dir="$1"
    if is_floating; then
        bspc node --focus "$dir.local.floating"
    else
        bspc node --focus "$dir.local.!floating"
    fi
}

# if current node is floating, move the node $dir{west,south,north,east} by $size px
# otherwise swap current node with $dir{west,south,north,east} non-floating node
function move {
    local dir="$1"
    local switch sign
    if is_floating; then
        case "$dir" in
            west)  switch="-x"; sign="-" ;;
            east)  switch="-x"; sign="+" ;;
            north) switch="-y"; sign="-" ;;
            *)     switch="-y"; sign="+" ;;
        esac
        xdo move ${switch} ${sign}${size}
    else
        bspc node --swap  $dir.local.!floating
    fi
}

function resize {
    local dir="$1"
    local size="$2"
    if is_floating; then
        xdo resize -$dir $size
    else
        case $dir in
            w) bspc node -z right $size 0; bspc node -z left $size 0 ;;
            h) bspc node -z bottom 0 $size; bspc node -z top 0 $size ;;
        esac
    fi
}

# a scratchpad terminal that is shared across desktops
function scratchpad_top {
    class="padtop"
    id=$(xdotool search --class "$class")
    if [[ -z "$id" ]]; then
        local top_gap=$(($(xrdb-get-value bar.height) - $(xrdb-get-value wm.border)))
        local w=$(xrdb-get-value sp.top.width)
        local h=$(xrdb-get-value sp.top.height)

        bspc rule --add "$class" state=floating sticky=on
        st -A 255 \
           -g ${w}x${h}+0+${top_gap} \
           -c "$class" \
           -e /bin/sh -c "tmux attach-session -t$class || tmux new-session -s$class" &

        center_floating --class "$class"
    else
        bspc node $id --flag hidden
        bspc node -f $id
    fi
}

# a scratchpad terminal that is unique to current desktop
function scratchpad_bot {
    desktop_id=$(xdotool get_desktop)
    [[ -z "$desktop_id" ]] && notify-send "what"
    class="padbot$((desktop_id + 1))"
    id=$(xdotool search --class "$class")
    if [[ -z "$id" ]]; then
        local w=$(xrdb-get-value sp.top.width)
        local h=$(xrdb-get-value sp.top.height)

        bspc rule --add "$class" state=floating
        st -A 255 \
           -g ${w}x${h}+1-1 \
           -c "$class" \
           -e /bin/sh -c "tmux attach-session -t$class || tmux new-session -s$class" &

        center_floating --class "$class"
    else
        bspc node "$id" --flag hidden
        bspc node -f "$id"
    fi
}

# center current floating window in x-axis. if $1 is true, also centers in
# y-axis. rest of the arguments are passed
function center_floating {
    wid=''

    center_y=0
    if [ "$1" = "true" ]; then
        center_y=1
        shift
    fi

    # wait until the window shows up and set $wid
    if [ -n "$1" ]; then
        wid=$(xdotool search --sync "$@")
    else
        wid=$(xdotool getactivewindow)
    fi

    SCREEN_WIDTH=$(wm-screen-width)
    SCREEN_HEIGHT=$(wm-screen-height)
    WIDTH=$(xwininfo -id "$wid" | grep Width | cut -d: -f2 | xargs)
    HEIGHT=$(xwininfo -id "$wid" | grep Height | cut -d: -f2 | xargs)
    X=$(((SCREEN_WIDTH - WIDTH) / 2))
    Y=$(((SCREEN_HEIGHT - HEIGHT) / 2))

    if [ "$center_y" = 1 ]; then
        xdotool windowmove "$wid" $X $Y
    else
        xdotool windowmove "$wid" $X y
    fi
}

function move_floating {
    wid=''
    position=$1
    shift

    # wait until the window shows up and set $wid
    if [ -n "$1" ]; then
        wid=$(xdotool search --sync "$@")
    else
        wid=$(xdotool getactivewindow)
    fi

    SCREEN_WIDTH=$(wm-screen-width)
    SCREEN_HEIGHT=$(wm-screen-height)
    WIDTH=$(xwininfo -id "$wid" | grep Width | cut -d: -f2 | xargs)
    HEIGHT=$(xwininfo -id "$wid" | grep Height | cut -d: -f2 | xargs)
    X=$(((SCREEN_WIDTH - WIDTH) / 2))
    Y=$(((SCREEN_HEIGHT - HEIGHT) / 2))

    case $position in
        Q) xdotool windowmove "$wid" 10 $((10 + $(xrdb-get-value bar.height))) ;;
        W) xdotool windowmove "$wid" $((SCREEN_WIDTH - 10 - WIDTH)) $((10 + $(xrdb-get-value bar.height))) ;;
        A) xdotool windowmove "$wid" 10 $((SCREEN_HEIGHT - 10 - HEIGHT)) ;;
        S) xdotool windowmove "$wid" $((SCREEN_WIDTH - 10 - WIDTH)) $((SCREEN_HEIGHT - 10 - HEIGHT)) ;;
    esac

}


cmd="$1"; shift
case $cmd in
    focus)   focus "$@" ;;
    move)    move  "$@" ;;
    resize)  resize "$@" ;;
    focus_toggle_floating) focus_toggle_floating "$@" ;;
    scratchpad_top) scratchpad_top "$@" ;;
    scratchpad_bot) scratchpad_bot "$@" ;;
    center_floating) center_floating "$@" ;;
    move_floating) move_floating "$@" ;;
esac
