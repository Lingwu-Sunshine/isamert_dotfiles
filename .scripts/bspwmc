#!/bin/bash

size=30

function focused_monitor_name {
    bspc query --monitors --monitor focused --names
}

function focused_monitor_info {
    xrandr -q | grep "$(focused_monitor_name) connected" | tr "+x" " " | sed "s/primary //"
}

function focused_monitor_height {
    focused_monitor_info | cut -d" " -f4
}

function focused_monitor_width {
    focused_monitor_info | cut -d" " -f3
}

function focused_monitor_x_offset {
    focused_monitor_info | cut -d" " -f5
}

function focused_monitor_y_offset {
    focused_monitor_info | cut -d" " -f6
}

function is_floating {
    bspc query -T -n | grep -q '"state":"floating"'
}

# if current node is floating, focus the newest non-floating node
# otherwise focus the newest floating node
function focus_toggle_floating {
    if is_floating; then
        bspc node newest.!floating --focus
    else
        bspc node newest.floating --focus
    fi
}

# if current node is floating, focus $dir{west,south,north,east} floating node
# otherwise focus $dir{west,south,north,east} non-floating node
function focus {
    local dir="$1"
    if is_floating; then
        bspc node --focus "$dir.floating"
    else
        bspc node --focus "$dir.!floating"
    fi
}

# if current node is floating, move the node $dir{west,south,north,east} by $size px
# otherwise swap current node with $dir{west,south,north,east} non-floating node
function move {
    local dir="$1"
    local switch sign
    if is_floating; then
        case "$dir" in
            west)  switch="-x"; sign="-" ;;
            east)  switch="-x"; sign="+" ;;
            north) switch="-y"; sign="-" ;;
            *)     switch="-y"; sign="+" ;;
        esac
        xdo move ${switch} ${sign}${size}
    else
        bspc node --swap  $dir.local.!floating
    fi
}

function resize {
    local dir="$1"
    local size="$2"
    if is_floating; then
        xdo resize -$dir $size
    else
        case $dir in
            w) bspc node -z right $size 0; bspc node -z left $size 0 ;;
            h) bspc node -z bottom 0 $size; bspc node -z top 0 $size ;;
        esac
    fi
}

# a scratchpad terminal that is shared across desktops (unique for each monitor)
function scratchpad_top {
    monitor_name=$(focused_monitor_name)
    class="padtop-${monitor_name,,}"
    id=$(xdotool search --classname --class "$class")
    if [[ -z "$id" ]]; then
        local top_gap=$(($(xrdb-get-value bar.height) + $(xrdb-get-value bar.border)))
        local width=$(xrdb-get-value sp.top.width)
        local height=$(xrdb-get-value sp.top.height)
        if [[ $width = *% ]]; then
            local width=$(($(focused_monitor_width) * 100 / ${width%\%}))
            echo $width
        fi
        bspc rule --add "$class" state=floating sticky=on
        bspc rule --add "*:$class" state=floating sticky=on
        term --opaque \
           --name="$class" \
           --geometry="150x$height+$(focused_monitor_x_offset)+${top_gap}" \
           -e /bin/sh -c "tmux attach-session -t$class || tmux new-session -s$class" &

        wid=$(xdotool search --sync --classname --class "$class")
        xdo resize -w "$((width - 2 * $(xrdb-get-value wm.border)))" "$wid"
    else
        bspc node $id --flag hidden
        bspc node -f $id
    fi
}

# a scratchpad terminal that is unique to current desktop
function scratchpad_bot {
    desktop_id=$(($(xdotool get_desktop) + 1))
    [[ -z "$desktop_id" ]] && notify-send "what"
    class="padbot${desktop_id}"
    id=$(xdotool search --classname --class "$class")
    if [[ -z "$id" ]]; then
        local width=$(xrdb-get-value sp.bot.width)
        local height=$(xrdb-get-value sp.bot.height)
        if [[ $width = *% ]]; then
            local width=$(($(focused_monitor_width) * 100 / ${width%\%}))
            echo $width
        fi

        bspc rule --add "$class" state=floating
        bspc rule --add "*:$class" state=floating
        term --opaque \
           --name="$class" \
           --geometry="150x$height+$(focused_monitor_x_offset)-1" \
           -e /bin/sh -c "tmux attach-session -t$class || tmux new-session -s$class" &

        wid=$(xdotool search --sync --classname --class "$class")
        xdo resize -w "$((width - 2 * $(xrdb-get-value wm.border)))" "$wid"
        eval "$(xdotool getwindowgeometry --shell $wid)"
        xdo move -y "$(($(focused_monitor_height) - HEIGHT - 2 * $(xrdb-get-value wm.border)))" "$wid"
    else
        bspc node "$id" --flag hidden
        bspc node -f "$id"
    fi
}

# center current floating window in x-axis. if $1 is true, also centers in
# y-axis. rest of the arguments are passed
function center_floating {
    wid=''

    center_y=0
    if [[ "$1" = "true" ]]; then
        center_y=1
        shift
    fi

    # wait until the window shows up and set $wid
    if [[ -n "$1" ]]; then
        wid=$(xdotool search --sync "$@")
    else
        wid=$(xdotool getactivewindow)
    fi

    SCREEN_WIDTH=$(focused_monitor_width)
    SCREEN_HEIGHT=$(focused_monitor_height)
    WIDTH=$(xwininfo -id "$wid" | grep Width | cut -d: -f2 | xargs)
    HEIGHT=$(xwininfo -id "$wid" | grep Height | cut -d: -f2 | xargs)
    X=$(((SCREEN_WIDTH - WIDTH) / 2 + $(focused_monitor_x_offset)))
    Y=$(((SCREEN_HEIGHT - HEIGHT) / 2 + $(focused_monitor_y_offset)))

    if [[ "$center_y" = 1 ]]; then
        xdotool windowmove "$wid" $X $Y
    else
        xdotool windowmove "$wid" $X y
    fi
}

function move_floating {
    wid=''
    position=$1
    shift

    # wait until the window shows up and set $wid
    if [[ -n "$1" ]]; then
        wid=$(xdotool search --sync "$@")
    else
        wid=$(xdotool getactivewindow)
    fi

    SCREEN_WIDTH=$(focused_monitor_width)
    SCREEN_HEIGHT=$(focused_monitor_height)
    WIDTH=$(xwininfo -id "$wid" | grep Width | cut -d: -f2 | xargs)
    HEIGHT=$(xwininfo -id "$wid" | grep Height | cut -d: -f2 | xargs)
    GAP=10
    OFFSET_X=$(($(focused_monitor_x_offset) + GAP))
    OFFSET_Y=$(($(focused_monitor_y_offset) + GAP))

    case $position in
        Q) xdotool windowmove "$wid" $OFFSET_X $((OFFSET_Y + $(xrdb-get-value bar.height))) ;;
        W) xdotool windowmove "$wid" $((SCREEN_WIDTH + OFFSET_X - 2 * GAP - WIDTH)) $((OFFSET_Y + $(xrdb-get-value bar.height))) ;;
        A) xdotool windowmove "$wid" $OFFSET_X $((SCREEN_HEIGHT + OFFSET_Y - 2 * GAP - HEIGHT)) ;;
        S) xdotool windowmove "$wid" $((SCREEN_WIDTH + OFFSET_X - 2 * GAP - WIDTH)) $((SCREEN_HEIGHT + OFFSET_Y - 2* GAP - HEIGHT)) ;;
    esac
}


cmd="$1"; shift
"$cmd" "$@"
