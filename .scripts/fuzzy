#!/bin/bash
# Some sources that I used:
# https://bluz71.github.io/2018/11/26/fuzzy-finding-in-bash-with-fzf.html
# https://github.com/DanielFGray/fzf-scripts

# These are generally console-spesific stuff. For other interactive fuzzy
# finding stuff check out ~/.scripts/menu (it uses rofi and there are stuff
# for music, apps, passwords etc.).

function fzf_git_add {
    local files=$(git "$@" ls-files --modified --others --exclude-standard | fzf --multi --ansi --preview="git $* diff --color=always {1}")
    if [ -n "$files" ]; then
        git "$@" add --verbose $files
    fi
}

function fzf_git_files {
    local files=$(git "$@" ls-files | fzf --multi --ansi)
    if [ -n "$files" ]; then
        $EDITOR $files
    fi
}

# FIXME: execute
function fzf_git_log {
    git "$@" log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" |
    fzf --ansi --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git $* show --color=always %'" \
               --bind "enter:execute:
                  (grep -o '[a-f0-9]\{7\}' | head -1 |
                  xargs -I % sh -c 'git show --color=always % | bat') << 'FZF-EOF'
                  {}
                  FZF-EOF"
}

function fzf_kill {
    local pids=$( ps -u $USER -o pid:7,comm,pcpu:7,%mem:7,rss:8,cmd:500 --sort=-rss | fzf --multi --preview '' | tr -s [:blank:] | cut -d' ' -f2)
    if [ -n "$pids" ]; then
        echo "$pids" | xargs kill -9 "$@"
    fi
}

function fzf_packages_arch {
    local packages=$(fzf --height 100% \
                         --ansi \
                         --multi \
                         --preview="$AUR_HELPER -Si {2}" \
    < <( $AUR_HELPER -Ss "$1" |
      gawk '{
        getline descr;
        sub(/ */,"", descr);
        repo = blue "[" gensub(/\/.*/, "", 1) "]" reset;
        name = green gensub(/.*\//, "", 1, $1) reset;
        info = gensub(/[^ ]* /, "", 1);
        print repo, name, info, descr;
      }' blue="$(tput setaf 4)" green="$(tput setaf 10)" reset="$(tput sgr0)"
    ) | cut -d' ' -f2)
    [[ -n "$packages" ]] && $AUR_HELPER -S ${packages}
}

function fzf_file_contents {
    result=$(rg --no-text --line-number --color=always --colors match:fg:white . "$@" | fzf --ansi --preview '
    set file (echo {} | cut -d: -f1);
    set linum (echo {} | cut -d: -f2);
    set range (expr $linum - (expr $LINES / 2));
    set range_cmd (if test $range -gt -1; echo --line-range; end);
    set range_cmd_arg (if test $range -gt -1; echo \$range:; end);
    bat --color=always --style=header,numbers "$file" --highlight-line $linum $range_cmd $range_cmd_arg')
    selected_files=$(echo "$result" | cut -d: -f1)
    [[ -n $selected_files ]] && jaro --no-stdin "$selected_files"
}

case "$*" in
    "git add"*) shift 2; fzf_git_add "$@" ;;
    "git files"*) shift 2; fzf_git_files "$@" ;;
    "git log"*) shift 2; fzf_git_log "$@" ;;
    kill|fuck) shift; fzf_kill "$@" ;;
    packages) shift; fzf_packages_arch "$@" ;;
    file*|contents) shift; fzf_file_contents "$@" ;;
    "") fzf;;
esac
