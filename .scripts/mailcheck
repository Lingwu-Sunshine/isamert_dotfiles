#!/usr/bin/env python
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', type=str, action='append',
                    help="You can pass multiple users/passwords/servers. Like 'mailcheck --user user1 --password password1 --server server1 --user user2 --password password2 --server server2'")
parser.add_argument('-p', '--password', type=str, action='append')
parser.add_argument('-s', '--server', type=str, action='append',
                    help="The IMAP server address like 'imap.gmail.com'. For ProtonMail, use 'proton' or 'pm'.")
parser.add_argument('-S', '--separator', type=str, default="/",
                    help="Separator string for separating unread count of different accounts. Default: '/'")
parser.add_argument('-d', '--dump', type=str, default="",
                    help="Dump output to a file.")
parser.add_argument('-f', '--fail-on-zero', default=False, action='store_true',
                    help="If set, exit with 1 if all mailboxes have 0 unread mail.")
cfg, other_cfg = parser.parse_known_args()

results = []
for user, password, server in zip(cfg.user, cfg.password, cfg.server):
    if server in ('pm', 'proton', 'protonmail'):
        from protonmail.client import Client
        import logging
        logging.getLogger('twisted').propagate = False
        for key in logging.Logger.manager.loggerDict:
            logging.getLogger(key).propagate = False
            logging.getLogger(key).setLevel(logging.CRITICAL)

        client = Client(Username=user, blocking=True)
        client.api.login(password)
        response = client.api.conversations.count()
        response_code = response['Code']
        total_unread = 0
        if response_code == 1000:
            for count in response['Counts']:
                total_unread = total_unread + count['Unread']
        results.append(total_unread)
    else:
        import imaplib
        mail = imaplib.IMAP4_SSL(server)
        mail.login(user, password)
        mail.select("inbox", True)
        return_code, ids = mail.search(None, 'UnSeen')

        if return_code == 'OK':
            count = len([x for x in ids[0].split(b' ') if x])
            results.append(count)
        else:
            print(return_code)
            sys.exit(255)
is_all_zero = all([x == 0 for x in results])

if cfg.fail_on_zero and is_all_zero:
    sys.exit(1)

if is_all_zero:
    output = "0"
else:
    output = cfg.separator.join(map(lambda x: str(x), results))

print(output)

if cfg.dump:
    with open(cfg.dump, "w") as f:
        f.write(output)
