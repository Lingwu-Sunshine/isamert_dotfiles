#!/bin/bash

# This whole script is based on the fact that I'm not that retard to
# listen/watch more than one audio/video streams at the same time.
# If I do, I'll get punished for that sin.

MPV_SOCKET=/tmp/mpvsocket

mpv_pause() {
    echo '{ "command": ["set_property", "pause", true] }' | socat - "$MPV_SOCKET"
}

mpv_toggle() {
    echo '{"command": ["cycle", "pause"]}' | socat - "$MPV_SOCKET"
}

mpv_seek() {
    if [[ $1 == *% ]]; then # seek $1 percent
        echo 'percent'
        echo '{"command": ["seek", "'"${1%\%}"'",  "relative-percent"]}' | socat - "$MPV_SOCKET"
    else # seek $1 seconds
        echo '{"command": ["seek", "'"$1"'"]}' | socat - "$MPV_SOCKET"
    fi
}

# TODO: somehow pause videos/audios playing in firefox/qutebrowser
all_pause() {
    mpv_pause
    mpc pause
}

all_toggle() {
    # Give priority to mpv
    if pgrep mpv; then
        mpv_toggle
    else
        mpc toggle
    fi
}

all_seek() {
    if pgrep mpv; then
        mpv_seek "$@"
    else
        mpc seek "$@"
    fi
}

get_sink_name_from_sink_id() {
    pactl list sinks | grep -E "(Sink #$1)|(device.description)" | grep -A1 "Sink #$1" | sed -n "2p" | cut -d'"' -f2
}

switch_audio_channel() {
    if [[ $1 = "--help" ]]; then
        echo "Changes default sink to next one and moves all inputs to new default sink."
        echo "Try to use it when something is already playing."
    fi

    readarray -t sinks <<< "$(pactl list sinks short | cut -f1)"
    readarray -t inputs <<< "$(pactl list sink-inputs short | cut -f1)"
    current_sink=$(pactl list sinks short | grep "RUNNING" | head -c 1)

    if [[ -z $current_sink ]]; then
        notify-send "Error while switching audio channels" "Could not detect default sink. Playing something may help."
        exit 1
    fi

    new_sink=${sinks[0]}
    for sink in "${sinks[@]}"; do
        if (( sink > current_sink )); then
            new_sink="$sink"
            break
        fi
    done

    notify-send "Switching audio channel" "New default channel is $(get_sink_name_from_sink_id $new_sink), moving all inputs to that."

    # Move every input to new sink
    for input in "${inputs[@]}"; do
        pacmd move-sink-input "$input" "$new_sink"
    done

    # Make new sink the default
    pactl set-default-sink "$new_sink"
}

connect_bt_headphones() {
    if ! rfkill | grep "bluetooth.*unblocked"; then
        notify-send "Bluetooth Headphones" "Activating bluetooth... Please enter your password to unlock it."
        SUDO_ASKPASS="$HOME/.scripts/askpass" sudo rfkill unblock 0
        sleep 2
    fi

    TAB="$(printf '\t')"
    bluetoothctl << EOF
power on
connect BC:${TAB}
quit
EOF

    notify-send "Bluetooth Headphones" "Connection will be established in just a moment..."
}

mpv_subdl() {
    # This script is called from mpv and it downloads subtitle using `subdl`, then
    # loads downloaded subtitle into mpv.

    MPV_SOCKET=/tmp/mpvsocket
    file_path=$1
    language=$2

    echo 'show-text "Downloading subtitle..."' | socat - $MPV_SOCKET
    if subdl --lang="$language" "$file_path"; then
        echo 'show-text "Subtitle downloaded."' | socat - $MPV_SOCKET
        sub_file_path="${file_path%.*}.srt"
        echo "sub-add \"$sub_file_path\"" | socat - $MPV_SOCKET
    else
        echo 'show-text "Error while downloading subtitle!"' | socat - $MPV_SOCKET
    fi
}


opt=$1; shift
case "$opt" in
    *help) echo "mediastuff [mpv-(subdl|toggle|pause|seek)|all-(toggle|pause|seek)|switch-audio-channel|connect-bt-headphones]" ;;
    mpv*toggle)              mpv_toggle              "$@" ;;
    mpv*pause)               mpv_pause               "$@" ;;
    mpv*seek)                mpv_seek                "$@" ;;
    all*toggle)              all_toggle              "$@" ;;
    all*pause)               all_pause               "$@" ;;
    all*seek)                all_seek                "$@" ;;
    switch*audio*channel)    switch_audio_channel    "$@" ;;
    connect*bt*headphones)   connect_bt_headphones   "$@" ;;
    mpv*subdl)               mpv_subdl               "$@" ;;
esac
