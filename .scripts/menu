#!/bin/bash

all_name='[ALL]'

function trim {
    local var="${*:-$(</dev/stdin)}"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

function dmenu {
    # TODO: use fzf inside terminal
    rofi -dmenu -fuzzy -i "$@"
}

function _mpd-artists {
    mpc list artist | sort -f | dmenu -columns 4 -p artist
}

function _mpd-albums {
    local artist="$1"
    local albums

    mapfile -t albums < <(mpc list album artist "$artist")
    if (( ${#albums[@]} > 1 )) ; then
        {
            printf '%s\n' "$all_name"
            printf '%s\n' "${albums[@]}" | sort -f
        } | dmenu -p album
    else
        # We only have one album, so just use that.
        printf '%s\n' "${albums[0]}"
    fi
}

function mpd-playlist {
    local format="%position% - %title% - %album% - %artist%"
    local track

    track=$(mpc playlist -f "$format" | dmenu -i -p track)
    track=$(printf '%s' "${track%% *}")

    [[ -z $track ]] || mpc play $track
}

function mpd-artists {
    local artist=$(_mpd-artists)
    [[ $artist ]] || exit 1

    local album=$(_mpd-albums "$artist")
    #[[ $album ]] || exit 2

    if [[ $album == "$all_name" ]]; then
        mpc clear
        mpc find artist "$artist" | sort | mpc add
        mpc play
    else
        local songs=$(mpc find artist "$artist" album "$album")
        if [[ -z "$songs" ]] && [[ -n "$artist" ]]; then
            [[ -n "$album" ]] && menu youtube "$artist $album"
        else
            mpc clear
            echo "$songs" | sort | mpc add
            mpc play
        fi
    fi
}

function mpd-all {
    # Show all music files and play selected one. (If it'ts not found search
    # in youtube.)

    local SONG=$(mpc listall | dmenu)
    if [ -n "$SONG" ]; then
        if ! mpc add "$SONG" && [[ -n "$SONG" ]]; then
            menu youtube "$SONG"
        else
            mpc play "$(mpc playlist | wc -l)" # Play the last (just added) song
        fi
    fi
}

function youtube {
    # Search given string in youtube and show results. Play selected one in mpd or mpv.

    for arg; do
        case "$arg" in
            "--audio")    local AUDIO=1                               ;;
            "--video")    local VIDEO=1                               ;;
            *)            local SEARCH_STRING="${SEARCH_STRING} $arg" ;;
        esac
    done

    [[ -z "$SEARCH_STRING" ]] && SEARCH_STRING=$(dmenu -p "search yt")
    [[ -z "$SEARCH_STRING" ]] && exit

    local RESULT=$(youtube-viewer --no-use-colors --no-interactive --results=30 "$SEARCH_STRING" | dmenu -async-pre-read 0)
    RESULT=$(echo "$RESULT" | cut -d"." -f1 | xargs)

    local URL=$(youtube-viewer --no-use-colors --no-interactive --results=30 --extract="*URL*" --std-input="$RESULT" "$SEARCH_STRING" 2> /dev/null | grep "youtube.com/watch?v=")
    [[ -z $URL ]] && exit

    if [[ $VIDEO = 1 ]]; then
        tsp mpv "$URL"
    else
        mpd-yt play "$URL"
    fi
}

function files {
    f=$( ( git --git-dir="$HOME"/.dotfiles/ --work-tree="$HOME" ls-files; fd . --no-ignore-vcs --color=never --max-depth=5 ) | dmenu)

    if [[ "$1" == "--open" ]] && [[ -n "$f" ]]; then
        jaro "$f"
    else
        echo "$f"
    fi
}

function folders {
    f=$(fd . "$HOME" --no-ignore-vcs --color=never --type=d --max-depth=5 | dmenu)

    if [[ "$1" == "--open" ]] && [[ -n "$f" ]]; then
        jaro "$f"
    else
        echo "$f"
    fi
}

function file_contents {
    term --opaque --float -g $(xrdb-get-value menu.file_contents.geometry) -e /bin/sh -c "fuzzy file-contents Documents \$(git --git-dir="$HOME"/.dotfiles/ --work-tree="$HOME" ls-files --full-name)"
}

# Use `menu passwords -dump` to print password info into stdout.
function passwords {
    local KDBX_FILE="$HOME/Documents/sync/passwords.kdbx"
    local PASSWD=$(getpassword --keepass)
    local ENTRY=$(echo "$PASSWD" | keepassxc-cli locate "$KDBX_FILE" / | tail -n +2 | dmenu)
    if [ -n "$ENTRY" ]; then
        if [[ "$1" == "-dump" ]]; then
            getpassword "$ENTRY" -dump
        else
            local passinfo=$(getpassword "$ENTRY" --dump-all)
            local otherinfo=$(echo "$passinfo" | awk -F: '/^\[.*]:/ {print $1}')

            local what=$(echo -e "Fill fields (with Tab)\nFill fields (with Enter)\nFill password\n${otherinfo}\nShow all" | dmenu)
            local username=$(echo "$passinfo" | grep -i -m 1 "username" | cut -d: -f2- | trim)
            local password=$(echo "$passinfo" | grep -i -m 1 "password" | cut -d: -f2- | trim)
            case "$what" in
                "Fill fields (with Tab)")
                    sleep 0.2
                    xdotool type --delay 5 "$username"
                    xdotool key "Tab"
                    xdotool type --delay 5 "$password" ;;
                "Fill fields (with Enter)")
                    sleep 0.2
                    xdotool type --delay 5 "$username"
                    xdotool key "Return"
                    sleep 0.2
                    xdotool type --delay 5 "$password" ;;
                "Fill password")
                    sleep 0.2
                    xdotool type --delay 5 "$password" ;;
                "Show all")
                    local allinfo=$(printf "[username]: $username\\n[password]: $password\\n$passinfo" | awk -F: '/^\[.*]:/ {printf("%-40s%-70s\n",$1,$2)}' | dmenu | cut -d']' -f2- | trim | xclip -selection clipboard) ;;
                *)
                    echo "$passinfo" | grep -iF -m 1 "$what" | cut -d: -f2- | trim | xclip -selection clipboard ;;
            esac
            notify-send --expire-time=1000 'password-menu' 'Done.'
        fi
    fi

    # Clear clipboard after 20 secs
    if [[ ! "$1" == "-dump" ]]; then
        local secs=$((20))
        while [ $secs -gt 0 ]; do
           echo -ne "$secs\033[0K\r"
           sleep 1
           : $((secs--))
        done

        echo "" | xclip -selection clipboard
    fi
}


cmd="$1"
shift
case $cmd in
    *help) echo "menu [mpd-(artists|all|playlist)|youtube|files|folders|file-contents|passwords]";;
    mpd-artists) mpd-artists "$@";;
    mpd-all) mpd-all "$@";;
    mpd-playlist) mpd-playlist "$@";;
    youtube) youtube "$@";;
    files) files "$@";;
    folders) folders "$@";;
    file*contents) file_contents "$@";;
    passwords) passwords "$@";;
    *) rofi -async-pre-read 0 -modi combi -combi-modi window,drun,run,vms:rofi_vms -show combi "$@"
esac
