#!/bin/bash

all_name='[ALL]'

function dmenu {
    rofi -dmenu -fuzzy -i $@;
}

function _mpd-artists {
    mpc list artist | sort -f | dmenu -columns 4 -p artist
}

function _mpd-albums {
    local artist="$1"
    local albums

    mapfile -t albums < <(mpc list album artist "$artist")
    if (( ${#albums[@]} > 1 )) ; then
        {
            printf '%s\n' "$all_name"
            printf '%s\n' "${albums[@]}" | sort -f
        } | dmenu -p album
    else
        # We only have one album, so just use that.
        printf '%s\n' "${albums[0]}"
    fi
}

function mpd-playlist {
    local format="%position% - %title% - %album% - %artist%"
    local track

    track=$(mpc playlist -f "$format" | dmenu -i -p track)
    track=$(printf '%s' "${track%% *}")

    [[ -z $track ]] || mpc play $track
}

function mpd-artists {
    local artist=$(_mpd-artists)
    [[ $artist ]] || exit 1

    local album=$(_mpd-albums "$artist")
    #[[ $album ]] || exit 2

    if [[ $album == "$all_name" ]]; then
        mpc clear
        mpc find artist "$artist" | sort | mpc add
        mpc play
    else
        local songs=$(mpc find artist "$artist" album "$album")
        if [[ -z "$songs" ]]; then
            [[ ! -z "$artist" ]] && menu youtube "$artist $album"
        else
            mpc clear
            echo "$songs" | sort | mpc add
            mpc play
        fi
    fi
}

function mpd-all {
    # Show all music files and play selected one. (If it'ts not found search
    # in youtube.)

    local SONG=$(mpc listall | dmenu)
    if [ ! -z "$SONG" ]; then
        mpc add "$SONG"
        if [[ $? != 0 && ! -z "$SONG" ]]; then
            menu youtube "$SONG"
        else
            mpc play $(mpc playlist | wc -l) # Play the last (just added) song
        fi
    fi
}


function youtube {
    # Search given string in youtube and show results. Play selected one in mpd.

    local DOWNLOAD_URLS=$(mktemp)
    local SEARCH_STRING="$@"
    [[ -z "$1" ]] && SEARCH_STRING=$(rofi -dmenu -p "search yt")
    [[ -z "$SEARCH_STRING" ]] && exit

    local RESULT=$(youtube-viewer --no-use-colors --no-interactive $SEARCH_STRING | rofi -dmenu -i -async-pre-read 0)
    RESULT=$(echo $RESULT | cut -d"." -f1 | xargs)

    local URL=$(youtube-viewer --no-use-colors --no-interactive --extract="*URL*" --std-input="$RESULT" "$SEARCH_STRING" 2> /dev/null | grep "youtube.com/watch?v=")
    mpd-yt play "$URL"
}


function files {
    f=$(fd . $HOME --no-ignore-vcs --color=never --max-depth=6 | dmenu)

    if [[ "$1" == "--open" ]]; then
        case "$f" in
            "$HOME/Downloads/"*) dmanager $f ;;
            *) xdg-open "$f"
        esac
    else
        echo "$f"
    fi
}


function folders {
    f=$(fd . $HOME --no-ignore-vcs --color=never --type=d --max-depth=6 | dmenu)

    if [[ "$1" == "--open" ]]; then
        xdg-open "$f"
    else
        echo "$f"
    fi
}

# TODO: xdotool paste
# Use menu passwords -dump to print password info into stdout.
function passwords {
    local KDBX_FILE="$HOME/Documents/sync/passwords.kdbx"
    local PASSWD=$(getpassword --keepass)
    local ENTRY=$(echo "$PASSWD" | keepassxc-cli locate "$KDBX_FILE" / | tail -n +2 | dmenu)
    if [ ! -z "$ENTRY" ]
    then
        if [[ "$1" == "-dump" ]]; then
            getpassword "$ENTRY" -dump
        else
            local what=$(echo -e "Fill fields\nCopy password\nCopy username" | dmenu)

            local password=$(getpassword "$ENTRY")
            local username=$(getpassword "$ENTRY" -username)
            case "$what" in
                "Fill fields")
                    local win=$(xdotool search --onlyvisible --classname Navigator) # find firefox
                    [[ -z "$win" ]] && win=$(xdotool selectwindow)
                    sleep 0.5
                    xdotool type --window "$win" "$username"
                    xdotool key  --window "$win" "Tab"
                    xdotool type --window "$win" "$password" ;;
                "Copy password") echo "$password" | xclip -selection clipboard ;;
                "Copy username") echo "$username" | xclip -selection clipboard ;;
            esac
        fi
    fi

    # Clear clipboard after 20 secs

    if [[ ! "$1" == "-dump" ]]; then
        local secs=$((20))
        while [ $secs -gt 0 ]; do
           echo -ne "$secs\033[0K\r"
           sleep 1
           : $((secs--))
        done

        echo "" | xclip -selection clipboard
    fi
}


cmd="$1"
shift
case $cmd in
    "mpd-artists") mpd-artists "$@";;
    "mpd-all") mpd-all "$@";;
    "mpd-playlist") mpd-playlist "$@";;
    "youtube") youtube "$@";;
    "files") files "$@";;
    "folders") folders "$@";;
    "passwords") passwords "$@";;
    *) rofi -combi-modi window,drun,run -show combi "$@"
esac
