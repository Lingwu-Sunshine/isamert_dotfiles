;;(assoc
;;  #:pattern ".*"
;;  #:program "echo %f >> ~/debug-jaro")

;;
;; Some utilities
;;

(define (screen-height)
  (string-trim-both (read-sys-out "xrandr | grep '*' | awk '{print $1}' | cut -d'x' -f2 | head -n 1")))

(define (parent-path path)
  (string-join (reverse (cdr (reverse (string-split path #\/)))) "/"))

(define (index-of a b)
  (let [(tail (member a (reverse b)))]
    (and tail (length (cdr tail)))))

;;
;; Associations
;;

(assoc
  #:pattern '("(application|text)/(x-)?(pdf|postscript|ps|epub.*)" "image/(x-)?eps")
  #:program "zathura %f"
  #:view #t)

(assoc
  #:pattern "\\.org$"
  #:program "emacsclient -c --tty %f"
  #:term "emacsclient -c %f"
  #:on-error "notify-send 'error' 'emacs daemon is not working'"
  #:standalone #t)

(assoc
  #:pattern "^(text|application)/(x-)?csv$"
  #:program "sc-im %f"
  #:term "st -e"
  #:view #t
  #:edit (open-with 'editor))

(assoc
  #:pattern '("^text/html" "^application/x?htm")
  #:program (open-with 'browser)
  #:view #t
  #:edit (open-with 'editor))

(assoc
  #:name 'editor
  #:pattern '("^text/" "^application/(x-)?shellscript")
  #:program "nvim %f"
  #:term "st -e"
  #:view "bat %f"
  #:edit #t)

(assoc
  #:pattern "^video/"
  #:program "mpv %f"
  #:on-error "vlc %f"
  #:view #t)

(assoc
  #:pattern "^audio/"
  #:program "mpc insert %f"
  #:on-success "mpc next"
  #:on-error "mpv %f")

(assoc
  #:pattern "inode/directory"
  #:program "ranger %f"
  #:term "st -e"
  #:tmux "tmux split-window -h")

(assoc
  #:pattern '("^https?://(www.)?youtube.com/watch\\?.*v="
              "^https?://(www.)?youtu.be/"
              "^https?://(www.)?v.redd.it/\\w+/DASH"
              "^https?://([a-zA-Z-]+)?streamable.com"
              "^https?://giant.gfycat.com/*+"
              "^https?://.+/.+\\.(gifv|mp4|webm)(\\?.+)?$")
  #:program `("tsp"
              "mpv"
              "--geometry=-10-10"
              ,(format #f "--ytdl-format=bestvideo[height<=?~a]+bestaudio/best" (screen-height))
              "--autofit=880x495"
              "%f")
  #:on-error (open-with 'browser))

(assoc
  #:pattern "^https?://.+/.+\\.(jpg|png|gif)(\\?.+)?$"
  #:program "notify-send 'jaro' 'Opening image...'; TMP_IMG=$(mktemp); curl -L %f > $TMP_IMG && sxiv $TMP_IMG"
  #:on-error "feh --start-at %f"
  #:view #t
  #:edit "pinta %f")

;; Open all images in a folder starting with given image in sxiv
(assoc
  #:pattern "^image/.*$"
  #:program (λ (file mime-type)
              (when (not (string-prefix? "/" file))
                    (set! file (path-join (getcwd) file)))
              (let* ((parent-dir (parent-path file))
                     (file-index (1+ (index-of (basename file) (scandir parent-dir (λ (f) (not (equal? (stat:type (stat (path-join parent-dir f))) 'directory))))))))
                (system* "sxiv" "-n" (number->string file-index) parent-dir)))
  #:on-error "feh --start-at %f"
  #:view #t
  #:edit "pinta %f")

(assoc
  #:pattern "^https?://(www.)?reddit.com/r/\\w+/comments"
  #:program "rtv %f"
  #:term "st -e"
  #:tmux "tmux split-window -h"
  #:on-error (open-with 'browser))

(assoc
  #:pattern "^magnet:"
  #:program "diana add %f"
  #:on-success "notify-send 'Success' 'Torrent added to download list'"
  #:on-error "notify-send 'Fail' 'Can't add torrent")

(assoc
  #:name 'browser
  #:pattern '("^https?://.*"
              "^.*\\.html?(#[\\w_-]+)?")
  #:program "qutebrowser %f"
  #:test "pgrep qutebrowser"
  #:on-fail "firefox %f"
  #:view #t
  #:edit (open-with 'editor))

(assoc
  #:pattern "\\.torrent$"
  #:program "diana add %f"
  #:on-success "notify-send 'Success' 'Torrent added to download list'; rm %f"
  #:on-error "notify-send 'Fail' 'Can't add torrent")

(assoc
  #:pattern "^application/(x-)?(tar|gzip|bzip2|lzma|xz|compress|7z|rar|gtar|zip)(-compressed)?"
  #:program "extract %f"
  #:view "xarchiver %f")

(assoc
  #:pattern "^application/(x-)?(vnd.)?(ms-|ms)?(excel|powerpoint|word)"
  #:program "desktopeditors %F")

(assoc
  #:pattern ".*"
  #:program (select-alternative-with "fzf")
  #:term (select-alternative-with "dmenu")
  #:standalone #t)

;; vi:syntax=scheme

