#+TITLE: Emacs configuration file
#+AUTHOR: İsa Mert Gürbüz
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Introduction
This is my emacs configuration. My main focus is sanity. I'm a person who get frustrated pretty easily. So instead of optimizing the time spent on doing things, I try to find ways of doing things that does not make me frustrated. Most of the time you get speed boost as a byproduct.

* Preparation
** Variables and functions
Some basic variable and function definitions that will be used in configuration.

#+BEGIN_SRC emacs-lisp
  (defun isamert/mkdir-if-not (dir)
    "Create the DIR if it does not exist return DIR."
    (unless (file-exists-p dir)
      (make-directory dir))
    dir)

  ;; SOURCE: https://www.reddit.com/r/emacs/comments/345vtl/make_helm_window_at_the_bottom_without_using_any/
  (defun isamert/shackle-window (name size)
    "Make the buffer NAME appear at bottom of the window, filling SIZE percent of the window."
    (add-to-list 'display-buffer-alist
                 `(,name
                   (display-buffer-in-side-window)
                   (inhibit-same-window . t)
                   (window-height . ,size))))


  (defmacro isamert/prettify-mode (mode pairs)
    "Prettify given PAIRS in given MODE. Just a simple wrapper around `prettify-symbols-mode`"
    `(add-hook ,mode (lambda ()
                       (mapc (lambda (pair)
                               (push pair prettify-symbols-alist))
                             ,pairs)
                       (prettify-symbols-mode))))

  (defun isamert/delq* (list &rest elems)
    "Remove ELEMS from LIST. Like `delq' but removes more than just one item."
    (let ((l list))
      (mapc (lambda (item) (setq l (delq item l))) elems)
      l))

  (defun isamert/font-exists-p (font)
    "Check if FONT exists"
    (if (null (x-list-fonts font)) nil t))

  (defun isamert/assoc-regexp (key list &optional fn)
    "Like `assoc` but uses `string-match (car pair) KEY` for comparasion and returns all the matching pairs. FN is applied to the keys before matching, if present."
    (seq-filter (lambda (pair) (when (string-match (if fn (funcall fn (car pair)) (car pair)) key) pair)) list))

  (defun isamert/region-or (what)
    "Returns currently selected string or WHAT-at-point string. WHAT can be 'symbol 'word etc."
    (if (use-region-p)
        (buffer-substring-no-properties (region-beginning) (region-end))
      (thing-at-point what t)))

  (defun isamert/define-key (&rest k+c)
    "Simple wrapper around `define-key' that let's you define-keys multiple times in one call."
    (let ((mode (car k+c)))
    (setq k+c (cdr k+c))
      (while k+c
        (define-key mode (car k+c) (cadr k+c))
        (setq k+c (cddr k+c)))))
#+END_SRC

** Package repos
Add ~melpa~ and ~org~ package archives.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

  (package-initialize)

  ;; Update the packages
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

** use-package
Install ~use-package~. From now on I will use ~use-package~ to install and configure packages.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package) (package-install 'use-package))
#+END_SRC

*** quelpa
Helps you to install packages from other sources, like github etc.
#+BEGIN_SRC emacs-lisp
(use-package quelpa-use-package
  :ensure t
  :init (setq quelpa-update-melpa-p nil)
  :config (quelpa-use-package-activate-advice))
#+END_SRC

Here is an example that shows you how to install a package from github:
#+BEGIN_SRC
(use-package PACKAGE-NAME
  :ensure t
  :diminish
  :quelpa (PACKAGE-NAME
           :fetcher github
           :branch "WIP" ;; Optional
           :repo "yyoncho/company-box"))
#+END_SRC

*** diminish
diminish.el provides a way to hide mode indicators from mode line. Either pass ~:diminish t~ to use-package while installing or just call ~diminish 'x-mode)~.

#+BEGIN_SRC emacs-lisp
(use-package diminish :ensure t)
#+END_SRC

* Basics
** Sane defaults
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000           ;; Better than default
        read-process-output-max (* 1024 1024) ;; Better than default
        confirm-kill-processes nil            ;; When exitting, kill processes withouh asking
        ring-bell-function 'ignore             ;; This completely disables alarms
        column-number-mode t                   ;; Show column number
        create-lockfiles nil)                  ;; These just clutter the filesystem

  (global-visual-line-mode t)                  ;; Wrap long lines
  (diminish 'visual-line-mode)
  (fset 'yes-or-no-p 'y-or-n-p)                ;; Ask y/n instead of yes/no
#+END_SRC

Some sources about the variables that I changed:
- https://github.com/emacs-lsp/lsp-mode#performance

** Recent files
Save recent files. Also exclude package files that appears after installing a package or after an update from recent list.

#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
  (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/elpa/.*" (getenv "HOME")))
#+END_SRC

** Save minibuffer, kill-ring, search-ring history
#+begin_src emacs-lisp
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)
        savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
#+end_src

** Better scrolling
*** Better settings for mouse scroll
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil)            ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)                  ;; scroll window under mouse
#+END_SRC

*** Mouse shortcuts for zooming
- Ctrl-Scroll to zoom in and out

#+BEGIN_SRC emacs-lisp
  (global-set-key [C-mouse-4] 'text-scale-increase)
  (global-set-key [C-mouse-5] 'text-scale-decrease)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C-=") 'text-scale-decrease)
#+END_SRC

*** Conservative scrolling
If the cursor is at the end of the file, when you scroll emacs does a strange jump. This fixes it.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100) ;; When cursor reaches end, just scroll line-by-line
#+END_SRC

** Place all backup files in same directory
Instead of having a file that ends with ~ or '# files in same directory, save all backup files in =~/.emacs.d/backups=.

#+BEGIN_SRC emacs-lisp
  (defconst backup-dir (isamert/mkdir-if-not"~/.emacs.d/backups/"))

  (setq backup-directory-alist `((".*" . ,backup-dir)))
  (setq auto-save-file-name-transforms `((".*" ,backup-dir t)))
#+END_SRC

** Undo tree (Persistent undo and stuff)
- ~undo-tree~ gives a persistent undo.
- Also it keeps undo history as a tree instead of a linear history. ~undo-tree-visualize~ may help.

#+BEGIN_SRC emacs-lisp
  (defconst undo-dir
    (isamert/mkdir-if-not "~/.emacs.d/undo/"))

  (use-package undo-tree
    :diminish undo-tree-mode
    :ensure t
    :init
      (setq undo-tree-auto-save-history t
            undo-tree-history-directory-alist `(("." . ,undo-dir))
            undo-tree-enable-undo-in-region nil) ;; this fixes something?
      (setq evil-undo-system 'undo-tree)
    :config
    (global-undo-tree-mode))
#+END_SRC

** Remove trailing space before save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook
            'delete-trailing-whitespace)
#+END_SRC

** Automatically run some commands after saving specific files
This is like =autocmd BufWritePost= of vim. When a particular file is edited, I want to make sure a command runs after the save.

#+BEGIN_SRC emacs-lisp
  (defvar run-after-save-alist
    '(("~/.\\(Xresources\\|Xdefaults\\)" . "xrdb %; notify-send 'xrdb updated'")
      ("~/.Xresources.d/.*"              . "xrdb ~/.Xresources; notify-send 'xrdb updated'")
      ("~/.config/sxhkd/sxhkdrc"         . "pkill -USR1 -x sxhkd; notify-send 'sxhkd updated'"))
    "File association list with their respective command.")
#+END_SRC

*** Implementation
#+BEGIN_SRC emacs-lisp
  (defun isamert/post-save-run-command ()
    "Execute the specified command after saving specified file."
    (let* ((fname (buffer-file-name))
           (match (isamert/assoc-regexp fname run-after-save-alist 'expand-file-name)))
      (when match
        (mapcar (lambda (pair) (shell-command (s-replace "%" fname (cdr pair)))) match))))

  (add-hook 'after-save-hook 'isamert/post-save-run-command)
#+END_SRC

* Visuals
** General
Hide menubar and toolbar and replace blinking cursor with nice static box cursor.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)                ;; Disable menubar
  (tool-bar-mode 0)                ;; Disable toolbar
  (blink-cursor-mode 0)            ;; Disable blinking cursor
  (scroll-bar-mode -1)             ;; Disable scrollbars
  (global-hl-line-mode t)          ;; Highlight current line
  (setq inhibit-startup-message t) ;; Close startup screen

  ;; Disable global-hl-line-mode in eshell, ansi-term, vterm
  (mapcar
    (lambda (mode) (add-hook mode (lambda () (setq-local global-hl-line-mode nil))))
    '(eshell-mode-hook term-mode-hook vterm-mode-hook))
#+END_SRC

** Fonts and theme
#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :defer t
      :init (enable-theme 'doom-one))

    (defconst isamert/fonts
      '("Iosevka Nerd Font"))

    (defvar isamert/font-size
      (if (> (display-pixel-width) 1920) 150 110)
      "Default font size.  It's bigger if screen is >1080P.")

    (defun isamert/set-font-and-theme-config ()
      "Configure font and theme."
      ;; Set the first avilable font from the `isamert/fonts' list
      (-each-r-while isamert/fonts #'isamert/font-exists-p
	(lambda (font)
	  (when
	    (set-face-attribute 'default nil
				:font font
				:weight 'normal
				:width 'normal
				:height isamert/font-size))))
      ;; ...and load the theme
      (load-theme 'doom-one t))

    (add-hook 'after-make-frame-functions (lambda (frame) (with-selected-frame frame (load-theme 'doom-one t))))

    (if (daemonp)
	;; Following sets font/font-size for each emacsclients frame
	(add-hook 'after-make-frame-functions
		  (lambda (frame)
		    (with-selected-frame frame
		      (isamert/set-font-and-theme-config))))
      ;; Not in daemon mode, set theme etc directly
      ;;(isamert/set-font-and-theme-config)
      )
#+END_SRC

** all-the-icons
You should run =all-the-icons-install-fonts= command after this.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :ensure t)
#+END_SRC

** Frame title
Make window title contain buffer name so it's easier to identify windows. I use ~rofi~ to switch between windows in my DE, so it helps to have buffer name in window title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format "%b - emacs")
#+END_SRC

** Parentheses
*** Matching
Just enable parenthesis matching.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'parenthesis)
  (show-paren-mode 1)
#+END_SRC

*** Rainbow
Colors parentheses depending on their dept.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Highlight trailing spaces
Following highlights trailing spaces. Also see: [[Remove trailing space before save]]

#+BEGIN_SRC emacs-lisp
  (require 'whitespace)

  (setq whitespace-style '(face empty tabs trailing))
  (setq whitespace-global-modes '(not org-mode markdown-mode vterm-mode magit-log-mode))
  (global-whitespace-mode t)

  ;; Hide whitespace mode in modeline
  (diminish 'global-whitespace-mode)
#+END_SRC

** Spaces instead of tabs
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Shackle windows
Make some temproary windows appear at bottom. This makes buffer management so much easier. Buffers that will match given regex will appear at bottom while covering the given amount of screen.

#+BEGIN_SRC emacs-lisp
  (isamert/shackle-window "\\*Help\\*" 0.4)
  (isamert/shackle-window "\\*Warnings*\\*" 0.2)
  (isamert/shackle-window "\\*Backtrace*\\*" 0.4)
  (isamert/shackle-window "\\*Flycheck.*" 0.4)
  (isamert/shackle-window "\\*Org Src.*\\*" 0.4)
  (isamert/shackle-window "\\*Agenda Commands\\*" 0.4)
  (isamert/shackle-window "\\*Org Agenda\\*" 0.4)
  (isamert/shackle-window "\\*Org Select\\*" 0.4)
  (isamert/shackle-window "CAPTURE-*" 0.4)
  (isamert/shackle-window "magit.*" 0.7)
  (isamert/shackle-window "\\*xref\\*" 0.4)
  (isamert/shackle-window "\\*Org-Babel Error Output\\*" 0.4)
  (isamert/shackle-window "\\*curl error\\*" 0.4)
  (isamert/shackle-window "\\*helpful.*\\*" 0.4)
#+END_SRC

* evil-mode
** Install
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (setq evil-want-integration t
          evil-want-keybinding t
          evil-want-C-i-jump nil
          ;; ^ Makes tab key work as expected in terminal
          evil-kill-on-visual-paste nil
          ;; ^ When I paste something in visual mode, I don't want it to take over the kill ring
          evil-want-C-u-scroll nil)
          ;; ^ Over the time I found myself utilizing emacs C-u more and more, so disable this

    ;; Make horizontal movement cross lines
    (setq-default evil-cross-lines t)

    ;; Move between visual lines instead of real lines
    (evil-define-key 'normal 'global
      (kbd "<remap> <evil-next-line>") #'evil-next-visual-line
      (kbd "<remap> <evil-previous-line>") #'evil-previous-visual-line)
    (evil-define-key 'motion 'global
      (kbd "<remap> <evil-next-line>") #'evil-next-visual-line
      (kbd "<remap> <evil-previous-line>") #'evil-previous-visual-line)

    ;; Change cursor colors based on current mode.
    (setq evil-normal-state-cursor '("green" box)
          evil-visual-state-cursor '("orange" box)
          evil-emacs-state-cursor '("purple" box)
          evil-insert-state-cursor '("pink" bar)
          evil-replace-state-cursor '("red" bar)
          evil-operator-state-cursor '("red" hollow))

    (evil-mode 1))
#+END_SRC

** Ex Commands
Some ex commands aliases to prevent typos. See [[https://blog.sanctum.geek.nz/vim-koans/][this]].

#+begin_src emacs-lisp
  (evil-ex-define-cmd "Q" #'evil-quit)
  (evil-ex-define-cmd "Wq" #'evil-save-and-quit)
#+end_src

** evil-leader
Enable leader key and bind some keys.

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :after evil
    :config
    (global-evil-leader-mode)

    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
      ;; generic
      ";"   'eval-last-sexp

      ;; buffers
      "bq" 'evil-quit
      "bd" 'evil-delete-buffer))
#+END_SRC

** evil-mc
Multiple cursors for evil.

- Basics
  - =C-n= / =C-p= are used for creating cursors
  - =M-n= / =M-p= are used for cycling through already created cursors.
  - =A= and =I= creates cursors in visual selection mode as you may expect.
  - =gkk= to clear all cursors.

- To be able to create cursors at arbitrary positions:
  - =gkp= to pause all cursors. (Your main cursors moves freely while mc cursors stays still)
  - =gkr= to resume paused cursors.
  - =gkh= create a cursor at the point of main cursor. (Use after =gkp=).

#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
    :ensure t
    :after evil
    :diminish evil-mc-mode
    :config
    ;; I use "gr" (which is the default key combination that brings up evil-mc commands) for something else
    ;; So remove "gr" binding
    (evil-define-key* '(normal visual) evil-mc-key-map (kbd "gr") nil)

    ;; Add my bindings using "gk"
    (evil-define-key 'normal evil-mc-key-map
      (kbd "gkk") #'evil-mc-undo-all-cursors
      (kbd "gkp") #'evil-mc-pause-cursors
      (kbd "gkr") #'evil-mc-resume-cursors
      (kbd "gkh") #'evil-mc-make-cursor-here)

    (evil-define-key 'visual evil-mc-key-map
      "A" #'evil-mc-make-cursor-in-visual-selection-end
      "I" #'evil-mc-make-cursor-in-visual-selection-beg)
    (global-evil-mc-mode 1))
#+END_SRC

** evil-surround
Change surroundings. Do =cs"'= to turn ="Hello world!"= into ='Hello world!'=.
- ='Hello world!'= ~cs'<q>~ =<q>Hello world!</q>=
- =Hel|lo= ~ysiw"~ ="Hello"= (| is the cursor position.)
- =Hello= ~ysw{~ ={ Hello }=  (~{[(~ adds spaces)
- =Hello= ~ysw}~ ={Hello}=    (~}])~ does not add spaces)

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :after evil
    :init
    (global-evil-surround-mode 1))
#+END_SRC

** evil-escape
Return back to normal mode using ~jk~ from anywhere. It does not play well with multiple cursors, so use ~ESC~ to when using evil-mc related stuff.

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :diminish
    :after evil
    :ensure t
    :config
    (setq evil-escape-key-sequence "jk"
          evil-escape-delay 0.2)
    (evil-escape-mode 1))
#+END_SRC

** evil-matchit
Jump between matching tags using ~%~, like =<div>...</div>=, ={...}= etc. =ci%=, =da%= etc. works as expected.

#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :diminish
    :after evil
    :ensure t
    :config
    (global-evil-matchit-mode 1))
#+END_SRC

** evil-goggles
~evil-goggles~ gives nice visual feedbacks while editing with evil-mode. When you do =dd=, =yw=, =ciw= or something similar, it will give a visual feedback for the selection. Feels kinda natural to have this.

#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :ensure t
    :after evil
    :diminish
    :config
    (setq evil-goggles-duration 0.20
          evil-goggles-pulse nil
          evil-goggles-enable-change t
          evil-goggles-enable-delete t
          evil-goggles-enable-indent t
          evil-goggles-enable-yank t
          evil-goggles-enable-join t
          evil-goggles-enable-fill-and-move t
          evil-goggles-enable-paste t
          evil-goggles-enable-shift t
          evil-goggles-enable-surround t
          evil-goggles-enable-commentary t
          evil-goggles-enable-nerd-commenter t
          evil-goggles-enable-replace-with-register t
          evil-goggles-enable-set-marker t
          evil-goggles-enable-undo t
          evil-goggles-enable-redo t)
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))

#+END_SRC

** evil-snipe
- Overall better =f/F/t/T= and . Nice visual feedbacks.
- =s/S= does 2-char searching.

#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :ensure t
    :after evil
    :diminish evil-snipe-local-mode
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    (setq evil-snipe-scope 'visible)
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))
#+END_SRC

** goto-chg
- =g;= goes to the last change. (repeatable)
- There is also =gv= which selects the last selection. Not related to this package, it's a default functionality but I wanted to mention.

#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :after evil
    :ensure t)
#+END_SRC

* org-mode
** org-plus-contrib
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "oo"  'org-open-at-point
    "op"  'org-set-property
    "oi"  'org-toggle-inline-images
    "or"  'org-mode-restart
    "os"  'org-schedule
    "oa"  'org-agenda
    "on"  'org-toggle-narrow-to-subtree
    "ow"  'widen

    ;; link stuff
    "oyy"  'org-store-link
    "oyi" 'org-copy-id
    "oyp" 'org-insert-link

    ;; org-clock
    "occ" 'org-clock-in
    "ocC" 'org-clock-cancel
    "ocl" 'org-clock-in-last
    "oco" 'org-clock-out
    "ocg" 'org-clock-goto)

  (evil-define-key 'normal org-mode-map
    "[[" 'org-previous-visible-heading
    "]]" 'org-next-visible-heading
    ;; TODO: find better movements
    ;;"(" 'outline-backward-same-level
    ;")" 'outline-forward-same-level
    "-" 'org-cycle-list-bullet
    ;; FIXME: find a solution for H-{h,j,k,l} in macOS
    (kbd "H-h") 'org-shiftleft
    (kbd "H-j") 'org-shiftdown
    (kbd "H-k") 'org-shiftup
    (kbd "H-l") 'org-shiftright

    ;; Hyper for macos is C-M-s
    (kbd "C-M-s-h") 'org-shiftleft
    (kbd "C-M-s-j") 'org-shiftdown
    (kbd "C-M-s-k") 'org-shiftup
    (kbd "C-M-s-l") 'org-shiftright

    ;; FIXME: mac hyper already contains shift
    (kbd "M-H") 'org-shiftmetaleft
    (kbd "M-J") 'org-shiftmetadown
    (kbd "M-K") 'org-shiftmetaup
    (kbd "M-L") 'org-shiftmetaright

    ;; FIXME: M-h,j,k,l conflicts with split swithcing shourtcuts
    ;; so I just prefixed them with Hyper but this does not feel natural.
    ;; FIXME: find a solution for M-H-{h,j,k,l} in macOS
    (kbd "M-H-h") 'org-metaleft
    (kbd "M-H-j") 'org-metadown
    (kbd "M-H-k") 'org-metaup
    (kbd "M-H-l") 'org-metaright
  )

  (evil-leader/set-key-for-mode 'org-mode
    "d" 'org-babel-remove-result
    "D" 'isamert/org-babel-remove-all-results)
#+end_src

** Some vars
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/Documents/notes")
    (defconst life-org "~/Documents/notes/life.org")
    (defconst bullet-org "~/Documents/notes/bullet.org")
    (defconst reality-org "~/Documents/notes/reality.org")
    (defconst projects-org "~/Documents/notes/projects.org")
    (defconst work-org "~/Documents/notes/well.org")

    ;; Put archive files under an archive/ directory
    ;; I don't want them to pollute my directory
    (setq org-archive-location "archive/%s_archive::")
    (setq org-directory "~/Documents/notes"
          org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
          ;; ^ org-store-link creates an ID for header only if called interactively and if there is no custom id
          org-agenda-files `(,life-org ,bullet-org ,projects-org ,reality-org ,work-org))

    ;; With the following, I can call functions inside this file in other org files
    (org-babel-lob-ingest "~/Documents/notes/utils.org"))
#+END_SRC

** Better defaults
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        ;; ^ Enable code highlighting in ~SRC~ blocks.
        org-hierarchical-todo-statistics t
        ;; ^ Show all children in todo statistics [1/5]
        org-imenu-depth 7
        ;; ^ include up to 7-depth headers in imenu search
        org-image-actual-width nil
        ;; ^ Disable showing inline images in full width. Now you can add `#+ATTR_*: :width 300` to resize inline images
        org-ellipsis "..⤵"
        ;; ^ Replace ... with ..↯ in collapsed sections
        org-habit-show-habits-only-for-today t)
        ;; ^ If a TODO item has the ':STYLE: habit' property, then show it only on todays agenda, does not show recurring times.

  ;; http://www.foldl.me/2012/disabling-electric-indent-mode/
  (defun isamert/disable-electric-indent ()
    (set (make-local-variable 'electric-indent-functions)
               (list (lambda (arg) 'no-indent))))

  (add-hook 'org-mode-hook #'isamert/disable-electric-indent)
#+END_SRC

** Auto indent subsections
Automatically invoke ~org-indent-mode~ which gives nice little indentation under subsections. It makes reading easier. This does not add any spaces/tabs to the text file, the indentation is only visually apparent in Emacs.

#+BEGIN_SRC emacs-lisp
  (add-hook
   'org-mode-hook
   (lambda ()
     (org-indent-mode t)
     (diminish 'org-indent-mode))
   t)
#+END_SRC

** Babel
#+begin_src emacs-lisp
  ;; Http request in org-mode babel.
  ;; You can get the generated curl command after executing the code
  ;; block, from *curl command history* buffer
  (use-package ob-http :ensure t)

  ;; Typescript
  (use-package ob-typescript :ensure t)

  ;; Allow these languages to run in code blocks
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (scheme . t)
     (python . t)
     (haskell . t)
     (js . t)
     (sql . t)
     (shell . t)
     (R . t)
     (typescript . t)
     (http . t)))

  ;; Don't ask permissions for evaluating code blocks
  (setq org-confirm-babel-evaluate nil)

  ;; Make certain files exacutable when tangled
  ;; Source: https://lists.gnu.org/archive/html/emacs-orgmode/2011-02/msg00465.html
  (defun isamert/make-tangled-files-executable ()
    (message (symbol-name major-mode))
    (message (buffer-file-name))
    (when (or (s-match "\\.\\(sh\\|py\\)$" (buffer-file-name))
              (s-match "\\(python\\|sh\\)" (symbol-name major-mode)))
      (set-file-modes (buffer-file-name) #o755)))
  (add-hook 'org-babel-post-tangle-hook 'isamert/make-tangled-files-executable)

  (defun isamert/org-babel-tangle-current-block ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'org-babel-tangle)))

  (evil-leader/set-key
    "ot" 'isamert/org-babel-tangle-current-block)
#+end_src

** Exporting
*** HTML
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC

*** iCalendar settings
#+BEGIN_SRC emacs-lisp
(setq org-icalendar-store-UID t
      org-icalendar-alarm-time 15
      org-icalendar-use-scheduled '(todo-start event-if-todo)
      org-icalendar-use-deadline '(todo-due event-if-todo))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'life-org)
    (setq org-agenda-use-time-grid t
          org-agenda-time-grid '((today remove-match)
                                 (800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400) "......" "----------------")))

    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-define-key 'normal org-agenda-mode-map
      (kbd "<RET>") 'org-agenda-switch-to
      (kbd "\t") 'org-agenda-goto
      "s" 'org-agenda-schedule
      "w" 'org-agenda-week-view
      "d" 'org-agenda-day-view
      "t" 'org-agenda-todo
      "L" 'org-agenda-log-mode
      "q" 'org-agenda-quit
      "R" 'org-agenda-clockreport-mode
      "r" 'org-agenda-redo)
#+END_SRC

** ToDo keywords
#+BEGIN_SRC emacs-lisp
  ;; Add this to org files if you need:
  ;; #+TODO: TODO IN-PROGRESS WAITING DONE
  ;; OR
  (setq org-todo-keywords
    '((sequence "TODO(t)" "PROG(p)" "WAIT(w)" "DONE(d)")))
  ;; Now you can do C-c C-t {t,p,w,d} to set the state directly

  (setq org-todo-keyword-faces
        '(("WAIT" . (:foreground "yellow" :weight bold))
          ("PROG" . (:foreground "magenta" :weight bold))))
#+END_SRC

** Presentation
#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :ensure t)
#+END_SRC

** Fancy/pretty stuff
#+begin_src emacs-lisp
  (setq org-tags-column 0)
  ;; ^ This does not work well with combination of org-fancy-priorities and org-pretty tags, so I disable it
  ;; And it also makes sense to disable this because it restricts yyour heading char limit.

  ;; Make headings look better with nice bullets.
  ;; It also adjusts the size of headings according to their level.
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))

  (use-package org-fancy-priorities
    :diminish
    :ensure t
    :hook (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '("🅰" "🅱" "🅲" "🅳" "🅴")))

  ;; Pretty nice website to find unicode stuff: unicode-table.com
  (use-package org-pretty-tags
    :diminish org-pretty-tags-mode
    :ensure t
    :config
    (setq org-pretty-tags-surrogate-strings
          '(("work"  . "⚒")
            ("meeting" . "☎")
            ("side"  . "❄")
            ("must"  . "✠")
            ("rutin" . "♟")
            ("study" . "☣")))
    (org-pretty-tags-global-mode))


  (isamert/prettify-mode 'org-mode-hook
                         '(("[ ]" . "☐")
                           ("[X]" . "☑" )
                           ("[-]" . "❍" )))
#+end_src

** org-clock
- TODO: find a Linux equivalent
- TODO: add an explanation

#+begin_src emacs-lisp
  ;; https://github.com/koddo/org-clock-statusbar-app

  (defun isamert/org-clock-statusbar-clock-in ()
    (interactive)
    (call-process "/usr/bin/osascript"
                  nil
                  0
                  nil
                  "-e"
                  (concat "tell application \"org-clock-statusbar\" to clock in \""
                          (replace-regexp-in-string "\"" "\\\\\"" org-clock-current-task)
                          "\"")))

  (defun isamert/org-clock-statusbar-clock-out ()
    (interactive)
    (call-process "/usr/bin/osascript"
                  nil
                  0
                  nil
                  "-e"
                  "tell application \"org-clock-statusbar\" to clock out"))

  (when (eq system-type 'darwin)
    (add-hook 'org-clock-in-hook #'isamert/org-clock-statusbar-clock-in)
    (add-hook 'org-clock-out-hook #'isamert/org-clock-statusbar-clock-out))
#+end_src

** org-ql
#+BEGIN_SRC emacs-lisp
(use-package org-ql :ensure t)
#+END_SRC

* Other packages
** dired
#+begin_src emacs-lisp
  (defun isamert/dired-up-directory ()
    "Like `dired-up-directory' but it does not create a new frame.
    Uses the existing one."
    (interactive)
    (find-alternate-file ".."))

  (setq dired-dwim-target t
        ls-lisp-dirs-first t
        ls-lisp-use-insert-directory-program nil)
  (put 'dired-find-alternate-file 'disabled nil)

  (evil-define-key 'normal dired-mode-map
    "h" 'isamert/dired-up-directory
    "l" 'dired-find-alternate-file
    "gg" 'evil-goto-first-line
    "G" 'evil-goto-line)
#+end_src
** image-mode
I want to be able to kill image buffers with simply hitting =q=. This does that.

#+begin_src emacs-lisp
  (evil-set-initial-state 'image-mode 'normal)
  (evil-define-key 'normal image-mode-map
    "q" #'evil-delete-buffer)
#+end_src

** hippie-expand
#+begin_src emacs-lisp
  (evil-define-key 'insert 'global
    (kbd "M-e") 'hippie-expand)

  ;; https://stackoverflow.com/questions/8722301/force-hippie-expand-to-respect-capitalization
  (defadvice hippie-expand (around hippie-expand-case-fold)
    "Try to do case-sensitive matching (not effective with all hippie-expand-try-functions-list functions)."
    (let ((case-fold-search nil))
      ad-do-it))
  (ad-activate 'hippie-expand)
#+end_src

** tramp
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh"
        tramp-verbose 2
        ;; ^ only show errors and warnings
        vc-handled-backends '(Git))
        ;; ^ only try to handle git, this speeds up things a little bit
#+end_src

** tree-sitter
This is a generic parser for bunch of languages. You can also inspect the syntax tree on the fly and do whatever you want to do with it. Best feature so far is just better (like, miles ahead better) syntax highlighting. Especially for JS/TS and Rust. See [[https://ubolonton.github.io/emacs-tree-sitter/][this page]] for more information.

#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :after tree-sitter
    :ensure t)
#+end_src

** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (setq treemacs-show-hidden-files nil
          treemacs-width 34
          treemacs-space-between-root-nodes nil
          treemacs-indentation 2)
    (add-to-list 'treemacs-ignored-file-predicates (lambda (filename abspath) (string-equal filename "node_modules")))

    (evil-define-key 'treemacs treemacs-mode-map
      ;; Treemacs has it's own mode, named treemacs.
      (kbd "M-f") 'treemacs
      (kbd "M-l") 'evil-window-right
      (kbd "\\") 'treemacs-visit-node-horizontal-split
      (kbd "-") 'treemacs-visit-node-vertical-split
      (kbd "W") 'treemacs-switch-workspace
      (kbd "E") 'treemacs-edit-workspaces
      (kbd "l") 'treemacs-TAB-action
      (kbd "h") 'treemacs-TAB-action
      (kbd "D") 'treemacs-delete
      (kbd "]]") 'treemacs-next-neighbour
      (kbd "[[") 'treemacs-previous-neighbour
      (kbd "]p") 'treemacs-next-project
      (kbd "[p") 'treemacs-previous-project
      (kbd "zm") 'treemacs-collapse-all-projects
      (kbd "za") 'treemacs-toggle-node)

    (evil-define-key 'normal 'global
      (kbd "M-f") #'treemacs))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode -1))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (defun aorst/treemacs-setup-title ()
    (let ((bg (face-attribute 'default :background))
          (fg (face-attribute 'default :foreground)))
      (face-remap-add-relative 'header-line
                               :background bg :foreground fg
                               :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
    (setq header-line-format
          '((:eval
             (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
                    (extra-align (+ (/ (length text) 2) 1))
                    (width (- (/ (window-width) 2) extra-align)))
               (concat (make-string width ?\s) text))))))
#+END_SRC

** winner-mode
This mode allows you to do /undo/ /redo/ operations on window layout changes. My most frequent use case is that sometimes I just want to focus on one window for a while and then return back to my old layout setup. These keybindings allows me to do that.

#+BEGIN_SRC emacs-lisp
  (setq winner-dont-bind-my-keys t)
  (winner-mode t)
  (evil-define-key 'normal 'global
    (kbd "C-w 1") 'delete-other-windows
    (kbd "C-w r") 'winner-redo
    (kbd "C-w u") 'winner-undo)
#+END_SRC

** which-key
A package that shows key combinations. (for example press C-x and wait) It also works with ~evil-leader~, just press leader key and wait to see your options.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

** magit
*** Installation
- Read this for some useful status mode keymaps: https://endlessparentheses.com/it-s-magit-and-you-re-the-magician.html
  - y :: Branch viewer (delete branches with ~k~)
  - ll :: Log current
  - bs :: Branch spin-off; create and checkout to a new branch, carry over the ongoing changes. It also undoes the changes in the current branch
  - bc :: Branch create; you can directly create new branch from *origin/develop* for instance

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    ;; Following snippet is needed to update modeline after a checkout happens
    (advice-add 'magit-checkout :after (lambda (a) (vc-refresh-state)))

    (isamert/define-key magit-status-mode-map
     "["  'magit-section-backward
     "]"  'magit-section-forward
     "("  'magit-section-backward-sibling
     ")"  'magit-section-forward-sibling
     "za" 'magit-section-toggle
     "zm" 'magit-section-show-level-1
     "zR" 'magit-section-show-level-4
     "zA" 'magit-section-toggle-children
     "j"  'next-line
     "k"  'previous-line
     "v"  'set-mark-command
     "V"  'set-mark-command
     "o"  'magit-diff-visit-file
     "K"  'magit-discard)

    (isamert/define-key magit-log-mode-map
     "["  'magit-section-backward
     "]"  'magit-section-forward
     "("  'magit-section-backward-sibling
     ")"  'magit-section-forward-sibling
     "za" 'magit-section-toggle
     "zm" 'magit-section-show-level-1
     "zR" 'magit-section-show-level-4
     "zA" 'magit-section-toggle-children
     "j"  'next-line
     "k"  'previous-line
     "v"  'set-mark-command
     "V"  'set-mark-command
     "o"  'magit-diff-visit-file
     "K"  'magit-discard)

    (evil-leader/set-key
      ;; magit/git
      "gs" 'magit-status
      "gf" 'magit-file-dispatch
      "gp" 'magit-pull
      "gP" 'magit-push
      "gr" 'magit-reset
      "gcc" 'magit-checkout
      "gcf" 'magit-file-checkout
      "gbb" 'magit-branch
      "gbc" 'magit-branch-create))
#+END_SRC

*** magit-todos
Show TODO/FIXME etc in magit-status buffer.
#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :ensure t
    :init (magit-todos-mode 1)
    :bind
    (:map magit-todos-section-map
      ("["  . 'magit-section-backward)
      ("]"  . 'magit-section-forward)
      ("("  . 'magit-section-backward-sibling)
      (")"  . 'magit-section-forward-sibling)
      ("za" . 'magit-section-toggle)
      ("zm" . 'magit-section-show-level-1)
      ("zR" . 'magit-section-show-level-4)
      ("zA" . 'magit-section-toggle-children)
      ("j"  . 'next-line)
      ("k"  . 'previous-line))
    (:map magit-todos-item-section-map
      ("j" . 'next-line)
      ("k" . 'previous-line)))
#+END_SRC

** perspective.el
Although I like eyebrowse, what I really want is to have isolated workspaces because buffer management just gets pretty complicated. I like to combine perspective.el and eyebrowse and I saw that spacemacs has a layer called layouts that does exactly what I want but I haven't had the time to figure it out and apply to my config.

#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :config
    (setq persp-state-default-file "~/.emacs.d/perspective-state")
    (evil-leader/set-key
      "ll" 'persp-switch-last
      "ls" 'persp-switch
      "lk" 'persp-kill
      "lS" 'persp-state-save
      "lL" 'persp-state-load
      "lr" 'persp-rename
      "lm" 'isamert/persp-toggle-modestring)
    ;; Manually saving is probably a better idea
    ;; (add-hook 'kill-emacs-hook #'persp-state-save)
    (persp-mode t))

  (defun isamert/persp-toggle-modestring ()
    (interactive)
    (if persp-show-modestring
        (persp-turn-off-modestring)
      (persp-turn-on-modestring)))

  ;; https://github.com/nex3/perspective-el/issues/150
  (defun persp-update-modestring ()
    "Override the `persp-update-modestring' function to only show current perspectives name in the modeline."
    (when persp-show-modestring
      (set-frame-parameter nil 'persp--modestring (format "[%s]" (persp-current-name)))))
#+END_SRC

** avy
avy is very similar to ~vim-easymotion~. It simply jumps to a visible text using a given char. Hit ~M-s~ and the char you want to jump.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (setq avy-keys '(?q ?w ?e ?r ?t ?a ?s ?d ?f ?j ?k ?l ?u ?i ?o ?p) ;; Only use these for jumping.
          avy-all-windows nil)
    :config

    ;; ^ Only search in current window/buffer
    (evil-define-key 'normal 'global
      (kbd "?") 'consult-imenu
      (kbd "M-s") 'avy-goto-char-2 ;; Go to any char
      (kbd "M-S") 'avy-goto-word-1 ;; Go to beginning of a word
      (kbd "M-g") 'avy-goto-line))
#+END_SRC

** ace-window
- =C-u M-a= starts ace-window in *swap* mode.
- Some shortcuts, after doing =M-a=:
  - x - delete window
  - m - swap windows
  - M - move window
  - c - copy window
  - j - select buffer
  - n - select the previous window
  - u - select buffer in the other window
  - c - split window fairly, either vertically or horizontally
  - v - split window vertically
  - b - split window horizontally
  - o - maximize current window
  - ? - show these command bindings

#+begin_src emacs-lisp
  (use-package ace-windpw
    :ensure t
    :config
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:foreground "deep sky blue" :bold t :height 3.0)))))
    (global-set-key (kbd "M-a") 'ace-window))
#+end_src
** selectrum
A nice, fast minibuffer narrowing framework. It works well with quite a lot of package.
- =prescient.el= brings history and more intelligent filtering to selectrum.
- =marginalia.el= brings annotations to selectrum, ie. it adds current keybinding of a command, summary of command to M-x.
  - =C-M-a= cycles the detail level.
- =embark.el= adds actions to selectrum. Actions are context specific, ie. the commands is based on if currently selected item is a file, folder, buffer etc.
  - =C-o= activates command mode. Next key should be command.
  - =C-S-o= disables command mode.
- =miniframe.el= shows all selectrum prompts in a nice mini popup frame.

#+begin_src emacs-lisp
  (use-package selectrum
    :ensure t
    :config
    (setq selectrum-extend-current-candidate-highlight t)
    (evil-define-key 'normal 'global
      (kbd "M-r") #'selectrum-repeat)
    (selectrum-mode))

  (use-package selectrum-prescient
    :ensure t
    :after selectrum
    :config
    (prescient-persist-mode +1)
    (selectrum-prescient-mode +1))

  (use-package marginalia
    :ensure t
    :after selectrum
    :bind (:map minibuffer-local-map
                ("C-M-a" . marginalia-cycle))

    :init
    (marginalia-mode)
    ;; Refresh selectrum when `marginalia-cycle' is called.
    (advice-add
     #'marginalia-cycle
     :after
     (labmda ()
             (when (bound-and-true-p selectrum-mode)
               (selectrum-exhibit)))))

  ;; TODO: Create some actions
  (use-package embark
    :ensure t
    :after selectrum
    :bind (:map minibuffer-local-map
                ("C-o" . embark-act)
                ("C-S-o" . embark-act-noexit)
                :map embark-file-map
                ("j" . dired-jump)))

  (use-package mini-frame
    :ensure t
    :config
    (setq mini-frame-show-parameters
          '((top . 0.15)
            (width . 0.55)
            (left . 0.5))
          mini-frame-color-shift-step 15)
    (mini-frame-mode +1))

  ;; https://github.com/raxod502/selectrum/wiki/Additional-Configuration#display-minibuffer-in-a-child-frame-with-mini-frame
  ;; Remove the following when upgrading to 27.2
  (define-advice fit-frame-to-buffer (:around (f &rest args) dont-skip-ws-for-mini-frame)
    (cl-letf* ((orig (symbol-function #'window-text-pixel-size))
               ((symbol-function #'window-text-pixel-size)
                (lambda (win from to &rest args)
                  (apply orig
                         (append (list win from
                                       (if (and (window-minibuffer-p win)
                                                (frame-root-window-p win)
                                                (eq t to))
                                           nil
                                         to))
                                 args)))))
      (apply f args)))
#+end_src

** consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :config
    (advice-add #'register-preview :override #'consult-register-window)

    (setq consult-preview-key (kbd "M-m"))
    ;; ^ When you do M-m on a candidate, it previews it

    (evil-define-key 'normal 'global
      (kbd "?") 'consult-imenu
      (kbd "M-o") 'isamert/consult-ripgrep-project
      (kbd "M-y") 'consult-yank
      (kbd "C-f") 'consult-line)

    (evil-leader/set-key
      "gg" 'consult-git-grep
      "RET" 'consult-buffer)

    (setq consult-find-command "fd --hidden --full-path ARG OPTS"
          consult-ripgrep-command "rg --ignore-file '.git/**' --hidden --null --line-buffered --color=always --max-columns=500 --no-heading --smart-case --line-number . -e ARG OPTS"
          consult-project-root-function #'isamert/current-project-root))

  (defun isamert/consult-ripgrep-project ()
    "`consult-ripgrep' in current project.
  `consult-ripgrep' with `consult-project-root-function' shows full path of the
  file in the results.  I don't want that."
    (interactive)
    (consult-ripgrep (isamert/current-project-root)))
#+end_src

** project.el
I was using projectile earlier but [[consult]] functions are just more than enough for project management. I only use couple of functions from =project.el= which is already built-in to Emacs.

#+begin_src emacs-lisp
  (defun isamert/current-project-root ()
    "Return the root path of current project."
    (interactive)
    ;; `project-current' is a function from project.el
    (cdr (project-current)))
#+end_src

I have all my projects under =~/Workspace/projects=. Some of them are groupped under another directory. This functions loops trough all of the directories and finds the ones without =.git= folder and adds those folders to project paths. Consider this:
#+BEGIN_QUOTE
~/Workspace/projects
 ├── groupped_projects
 ├   ├── project3
 ├   └── project4
 ├── project1
 ├   └── .git
 └── project2
     └── .git
#+END_QUOTE

#+begin_src emacs-lisp
  (defconst isamert/projects-root "~/Workspace/projects")

  (defun isamert/project-paths ()
    "Find every project dir under `isamert/projects-root'.
  Every folder without a \".git\" folder is considered to be a project group folder."
    (append `(,isamert/projects-root)
            (-flatten (-map (lambda (dir) (if (file-directory-p (concat dir "/.git")) '() `(,dir)))
                            (directory-files isamert/projects-root t "^[^.]")))))

  (defun isamert/find-file-in (dir)
    "Find file in DIR.
  fd is already fast enough, no need for `consuel-find's async approach."
    (interactive "D")
    (let ((default-directory dir))
      (->> (shell-command-to-string "fd .")
           (s-split "\n")
           (completing-read "Open file: ")
           (find-file))))

  (defun isamert/find-file-in-current-project-or-dir ()
    (interactive)
    (isamert/find-file-in (or (isamert/current-project-root) default-directory)))

  (defun isamert/switch-to-project ()
    "List all projects found under `isamert/project-paths' and switch to selected."
    (interactive)
    "Switch to project: "
    (->> (isamert/project-paths)
         (--map (shell-command-to-string (format "fd --exact-depth 1 --type d . %s" it)))
         (-reduce #'concat)
         (s-split "\n")
         (--map (s-replace (expand-file-name "~") "~" it))
         (completing-read "Switch to project: ")
         (isamert/find-file-in)))

  (evil-define-key 'normal 'global
    (kbd "M-F") 'isamert/find-file-in-current-project-or-dir
    (kbd "M-P") 'isamert/switch-to-project)
#+end_src

** flycheck
- Use =ge= (=consult-flycheck=) to list and jump any of the errors/warnings in the buffer.
  - Write ~i SPC~, ~w SPC~, ~e SPC~ to show infos, warnings, errors only in the =consult-flycheck=
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish
    :ensure t
    :init (global-flycheck-mode)
    :config
    (setq flycheck-idle-change-delay 1
          flycheck-check-syntax-automatically '(save new-line mode-enabled))
         ;; ^ Alternatives are (save idle-change new-line mode-enabled)

    (use-package consult-flycheck
      :ensure t)

    (evil-define-key 'normal flycheck-mode-map
      (kbd "ge") #'consult-flycheck
      (kbd "]e") #'flycheck-next-error
      (kbd "[e") #'flycheck-previous-error))
#+END_SRC

** company
An in-buffer completion framework. Works nicely with =lsp-mode= and bunch of other stuff.
- =company-box= :: Nice company front-end with icons and very nice documentation on hover thing.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    :config
    (setq company-selection-wrap-around t
          ;; ^ Return to first completion after the last one (cycles)
          company-global-modes '(not erc-mode message-mode help-mode gud-mode eshell-mode shell-mode org-mode markdown-mode)
          ;; ^ Disable on some modes
          company-minimum-prefix-length 1)
          ;; ^ Start completing after 1 char

    (define-key company-active-map (kbd "<tab>") nil)
    ;; ^ Disable tab key, so yasnippet and tab-out works nicely within company mode
    (evil-define-key 'insert 'global (kbd "C-SPC") 'company-complete)
    ;; ^ C-SPC force triggers company completion at point
    (define-key company-active-map (kbd "<return>") 'company-complete-selection)
    ;; ^ Enter simply applies the current selection

    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company-box
    :ensure t
    :after company
    :hook (company-mode . company-box-mode))
#+END_SRC

** origami-mode
This seems working better than =hs-minor-mode= and also it's supposedly works with =lsp-mode=.

#+BEGIN_SRC emacs-lisp
(use-package origami
  :ensure t
  :hook ((web-mode js-mode yaml-mode) . origami-mode))
#+END_SRC

** lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook ((web-mode . lsp)
           (js-mode . lsp)
           (typescript-mode . lsp)
           (dhall-mode . lsp)
           (haskell-mode . lsp)
           (rust-mode . lsp)
           (java-mode . lsp))
    :init
    (setq lsp-use-native-json t
          lsp-enable-xref t
          lsp-enable-links t
          lsp-enable-folding t
          lsp-enable-symbol-highlighting t
          lsp-enable-indentation nil
          lsp-enable-on-type-formatting nil
          lsp-before-save-edits nil
          lsp-eldoc-render-all nil
          lsp-enable-snippet t)

    (evil-define-key 'normal lsp-mode-map
      "gr" 'lsp-ui-peek-find-references
      "gd" 'lsp-ui-peek-find-definitions
      "gi" 'lsp-ui-peek-find-implementation
      "ga" 'lsp-execute-code-action))

  ;; ^ Disable eldoc, popup documentation is enough.

  (use-package lsp-ui
    :ensure t
    :after (lsp-mode)
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-show-code-actions nil))

  (use-package helm-lsp
    :ensure t
    :after (lsp-mode)
    :commands helm-lsp-workspace-symbol)

  (use-package lsp-treemacs
    :ensure t
    :after (lsp-mode)
    :commands lsp-treemacs
    :config
    (lsp-treemacs-sync-mode 1))

  (use-package dap-mode
    :ensure t
    :after (lsp-mode)
    :config
    (dap-mode t)
    (dap-ui-mode t))
#+END_SRC

** vterm
Also check out =~/.zshrc= and =~/.config/zsh/emacs.sh=. These files contains some helpful commands that enriches ~vterm~ usage.

- Use =C-z= to go in/out (you can also use =jk= to go back into normal mode from emacs mode) emacs state so that you can make use of use vi-mode in zsh.

#+BEGIN_SRC emacs-lisp
  (defun evil-collection-vterm-escape-stay ()
    "Go back to normal state but don't move cursor backwards.
    Moving cursor backwards is the default vim behavior but
    it is not appropriate in some cases like terminals."
    (setq-local evil-move-cursor-back nil))

  (use-package vterm
    :ensure t
    :config
    (define-key vterm-mode-map (kbd "C-u") 'vterm-send-C-u)
    (evil-define-key 'insert vterm-mode-map
      (kbd "C-]") 'vterm-send-escape
      (kbd "C-w") 'vterm-send-C-w
      (kbd "C-t") 'vterm-send-C-t
      (kbd "C-c") 'vterm-send-C-c
      (kbd "C-r") 'vterm-send-C-r
      (kbd "M-\\") 'vterm-send-M-\\
      (kbd "M--") 'vterm-send-M--
      (kbd "M-a") 'vterm-send-M-a)
    (evil-define-key 'normal vterm-mode-map
      "a"  'evil-emacs-state
      "i"  'evil-emacs-state)

    (evil-leader/set-key
      "tt" 'isamert/vterm-toggle-dedicated
      "tj" 'isamert/jump-to-visible-vterm
      "tl" 'isamert/run-last-command-on-visible-vterm
      "ty" 'isamert/send-selected-text-to-visible-vterm
      "tr" 'isamert/run-command-on-visible-vterm-with-history)
    (setq vterm-kill-buffer-on-exit t)
    (add-hook 'vterm-mode-hook #'evil-collection-vterm-escape-stay)
    (add-hook 'vterm-mode-hook #'evil-emacs-state))
#+END_SRC

*** Utility functions
#+begin_src emacs-lisp
  (defun vterm-send-M-\\ ()
    (interactive)
    (vterm-send-key "\\" nil t nil))

  (defun vterm-send-M-- ()
    (interactive)
    (vterm-send-key "-" nil t nil))

  ;; FIXME: only apply first found, dont use --map
  ;; FIXME: return true if window found
  (defun isamert/select-window-with-buffer (buffer-name)
    (--map (-as-> (window-buffer it) buffer
                  (buffer-name buffer)
                  (when (string-match buffer-name buffer)
                    (select-window it)))
           (window-list)))

  (defmacro isamert/with-visible-vterm-window (&rest body)
    `(with-selected-window (selected-window)
       (when (isamert/select-window-with-buffer ".*vterm.*")
         ,@body)))

  (defun isamert/run-command-on-visible-vterm (cmd)
    (isamert/with-visible-vterm-window
     (vterm-send-string cmd)
     (vterm-send-return)
     cmd))

  (defun isamert/send-selected-text-to-visible-vterm (start end)
    (interactive "r")
    (when (use-region-p)
      (isamert/run-command-on-visible-vterm (buffer-substring start end))))

  (defvar isamert/vterm-run-history '())
  (defvar isamert/jump-to-vterm-last-window nil)
  (defconst isamert/vterm-dedicated-buffer-name "*vterm-dedicated*")

  ;; FIXME: shackle does not work, it doesnt respect the 40
  (isamert/shackle-window isamert/vterm-dedicated-buffer-name 40)

  (defun isamert/vterm-toggle-dedicated ()
    "Open/toggle a dedicated vterm buffer."
    (interactive)
    (cond
     ((isamert/buffer-visible-p isamert/vterm-dedicated-buffer-name) (isamert/remove-window-with-buffer isamert/vterm-dedicated-buffer-name))
     ((get-buffer isamert/vterm-dedicated-buffer-name) (switch-to-buffer-other-window isamert/vterm-dedicated-buffer-name))
     (t (vterm isamert/vterm-dedicated-buffer-name))))

  (defun isamert/run-last-command-on-visible-vterm ()
    "Run last command on the currently visible vterm window and return back to current window."
    (interactive)
    (isamert/with-visible-vterm-window
     (vterm-send-up)
     (vterm-send-return)))

  (defun isamert/jump-to-visible-vterm ()
    "Jump to the visible vterm window.
  When invoked in a vterm window, return back to last window that this command is invoked from"
    (interactive)
    (cond
     ((string-match ".*vterm.*" (buffer-name (window-buffer (selected-window))))
      (select-window isamert/jump-to-vterm-last-window))
     (t
      (setq isamert/jump-to-vterm-last-window (selected-window))
      (isamert/select-window-with-buffer ".*vterm.*"))))

  (defun isamert/run-command-on-visible-vterm-with-history ()
    (interactive)
    (let ((cmd (isamert/run-command-on-visible-vterm
                   (isamert/select-one-of isamert/vterm-run-history
                                          nil
                                          "Run new command"
                                          #'identity))))
      (when cmd
        (setq isamert/vterm-run-history (cons cmd (delete cmd isamert/vterm-run-history))))))

  (defvar isamert/auto-focus-tmux-window t)
  (defvar isamert/tmux-session nil)
  (defun isamert/select-tmux-session ()
    "Select a tmux session for other tmux commands to use."
    (interactive)
    (--> (shell-command-to-string "tmux list-sessions")
         (split-string it "\n")
         (--filter (not (string-equal it "")) it)
         (isamert/select-one-of it)
         (car (split-string it ":"))
         (setq isamert/tmux-session it)))

  (defun isamert/select-tmux-session-if-needed ()
    (interactive)
    (when (not isamert/tmux-session)
      (isamert/select-tmux-session)))

  (defun isamert/tmux-focus-perspective-window ()
    "Focus to the tmux window that has the same name with current perspective.
  Tmux session is infered from isamert/select-tmux-session"
    (interactive)
    (isamert/select-tmux-session-if-needed)
    (--> (persp-name (persp-curr))
         (format "tmux list-windows -t%s | grep %s" isamert/tmux-session it)
         (shell-command-to-string it)
         (car (split-string it ":"))
         (format "tmux select-window -t%s:%s" isamert/tmux-session it)
         (shell-command-to-string it)))

  (defun isamert/auto-focus-tmux-advice-after (old-function &rest arguments)
    (apply old-function arguments)
    (when isamert/auto-focus-tmux-window
      (isamert/tmux-focus-perspective-window)))

  (defun isamert/auto-focus-tmux-advice-before (old-function &rest arguments)
    (when isamert/auto-focus-tmux-window
      (isamert/tmux-focus-perspective-window))
    (apply old-function arguments))

  ;; Focus to perspectives tmux pane before
  (advice-add 'isamert/vterm-toggle-dedicated
              :around #'isamert/auto-focus-tmux-advice-after)
  (advice-add 'isamert/run-last-command-on-visible-vterm
              :around #'isamert/auto-focus-tmux-advice-before)
  (advice-add 'isamert/run-command-on-visible-vterm-with-history
              :around #'isamert/auto-focus-tmux-advice-before)
#+end_src

** Spell checking
- Use =flyspell-mode= to start spell checking.
- ~z=~ or ~zw~ to correct current spelling mistake.
  - ~C-u zw~ to correct all mistakes in order.

*** Configuration
See [[https://isamert.net/2021/01/31/emacs-te-turkce-imla-denetimi.html][this]] for rationale behind the following configuration.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "hunspell"
        ispell-local-dictionary "en_US"
        ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          ("tr_TR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "tr_TR") nil utf-8)))

  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

*** flyspell-correct
Better way to correct spelling mistakes. By default it uses completing-read, so it's compatible with selectrum. This also makes it easy to save words into personal dictonary or silence warnings for session because it shows these options in the correction menu.
#+begin_src emacs-lisp
  (use-package flyspell-correct
    :ensure t
    :config
    ;; Rebind default evil ispell keys to flyspell-correct ones
    (evil-define-key 'normal 'global
      (kbd "z=") #'flyspell-correct-at-point
      (kbd "zw") #'flyspell-correct-wrapper))
      ;; ^ This goes to nearest spelling mistake.
      ;; If called with C-u, it goes into rapid mode where you correct all mistakes in order.
#+end_src

** moodline modeline
Light weight and nice modeline.

#+begin_src emacs-lisp
  (use-package mood-line
    :ensure t
    :diminish
    :quelpa (mood-line
             :fetcher gitlab
             :repo "jessieh/mood-line")
    :config (mood-line-mode))
#+end_src

** TODO mini-modeline
- Moves modeline to the minibuffer and disables modeline in all windows.
- FIXME: does not work with [[moodline modeline]]

#+begin_src
  (use-package mini-modeline
    :quelpa (mini-modeline :repo "kiennq/emacs-mini-modeline" :fetcher github)
    :after mood-line
    :config
    (setq mini-modeline-enhance-visual nil)
    ;; ^ Otherwise it breaks the color of completion menu popup.
    (setq mini-modeline-update-interval 0.5)
    ;; ^ Not sure
    (mini-modeline-mode t))
#+end_src
** howdoyou
When you search for something, it opens the results in an org-mode buffer. Results are fetched from SX (stack-exchange, stackoverflow etc) sites.
- =howdoyou-query= :: search function
- =C-M-Right= :: next answer
- =C-M-Left= :: prev answer

#+BEGIN_SRC emacs-lisp
  (use-package howdoyou
    :ensure t
    :config
    (setq howdoyou-switch-to-answer-buffer t
          howdoyou-number-of-answers 5)
    (evil-leader/set-key
      "hs" 'howdoyou-query))
#+END_SRC

** yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (push #'yas-hippie-try-expand hippie-expand-try-functions-list) ;; hippie-expand tries yas first
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (evil-leader/set-key
      "ss" 'yas-insert-snippet
      "sv" 'yas-visit-snippet-file
      "se" 'yas-visit-snippet-file
      "sn" 'yas-new-snippet
      "sc" 'yas-new-snippet)
    (evil-define-key 'insert 'global
      (kbd "M-s") 'company-yasnippet)
    (yas-global-mode 1))
#+END_SRC

** string-inflection
- In the case of =string-inflection-ruby-style-cycle=   : ~emacs_lisp => EMACS_LISP => EmacsLisp => emacs_lisp~
- In the case of =string-inflection-python-style-cycle= : ~emacs_lisp => EMACS_LISP => EmacsLisp => emacs_lisp~
- In the case of =string-inflection-java-style-cycle=   : ~emacsLisp => EMACS_LISP => EmacsLisp => emacsLisp~
- In the case of =string-inflection-all-cycle=          : ~emacs_lisp => EMACS_LISP => EmacsLisp => emacsLisp => emacs-lisp => Emacs_Lisp => emacs_lisp~

#+begin_src emacs-lisp
  (use-package string-inflection
    :ensure t
    :config
    (evil-define-key 'normal 'global (kbd "M-c") #'string-inflection-all-cycle))
#+end_src

** helpful
Better help dialogs with syntax highlighting, references, source etc.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :config
  ;; Override default help bindings
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h p") #'helpful-at-point)

  (evil-define-key 'normal helpful-mode-map
        "q" 'evil-delete-buffer))
#+end_src

** writeroom-mode
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t
    :config
    (setq writeroom-width 150) ;; Better for org-mode
    (evil-leader/set-key
      "W" 'writeroom-mode))
#+end_src

** git-link
#+begin_src emacs-lisp
  (use-package git-link
    :ensure
    :config
    (setq git-link-open-in-browser t)
    (evil-leader/set-key
      "gll" 'git-link
      "glh" 'git-link-homepage
      "glc" 'git-commit))

  (defun isamert/git-link-homepage ()
    "Like git-link-homepage itself but it does not open in browser, simply returns the address as string."
    (interactive)
    (let ((git-link-open-in-browser nil))
      (call-interactively 'git-link-homepage)
      (car kill-ring)))
#+end_src

** bufler
#+begin_src emacs-lisp
  (use-package bufler
    :ensure t
    :config
    (evil-define-key 'normal bufler-list-mode-map
      (kbd "K") 'bufler-list-buffer-kill
      (kbd "<return>") 'bufler-list-buffer-switch
      (kbd "q") 'quit-window
      (kbd "p") 'bufler-list-buffer-peek))

  (use-package helm-bufler
    :ensure t)
#+end_src

** smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (evil-define-key 'visual sp-keymap
      "S("  #'sp-wrap-round
      "S["  #'sp-wrap-square
      "S'"  #'sp-wrap-quote-single
      "S`"  #'sp-wrap-backtick
      "S<"  #'sp-wrap-angle
      "S\"" #'sp-wrap-quote-double
      "S="  #'sp-wrap-equal
      "S{"  #'sp-wrap-curly
      "S/"  #'sp-wrap-slash
      "S*"  #'sp-wrap-star
      "S+"  #'sp-wrap-plus
      "S#"  #'sp-wrap-star
      "S~"  #'sp-wrap-tilda)

    (sp-local-pair 'org-mode "=" "=" :actions :rem)

    (evil-define-key*
     '(normal insert) sp-keymap
     (kbd "M-[") #'sp-forward-barf-sexp
     (kbd "M-]") #'sp-forward-slurp-sexp
     (kbd "M-{") #'sp-backward-slurp-sexp
     (kbd "M-}") #'sp-backward-barf-sexp)

    (smartparens-global-mode))

  ;; TODO: do stuff like these
  (sp-with-modes '(php-mode)
    (sp-local-pair "/*." ".*/" :post-handlers '(("| " "SPC")))
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET") my-php-wrap-handler))
    (sp-local-pair "(" nil :prefix "\\(\\sw\\|\\s_\\)*"))

  (defun sp-wrap-quote-double () (interactive) (sp-wrap-with-pair "\""))
  (defun sp-wrap-quote-single () (interactive) (sp-wrap-with-pair "'"))
  (defun sp-wrap-backtick () (interactive) (sp-wrap-with-pair "`"))
  (defun sp-wrap-angle () (interactive) (sp-wrap-with-pair "<"))
  (defun sp-wrap-equal () (interactive) (sp-wrap-with-pair "="))
  (defun sp-wrap-tilda () (interactive) (sp-wrap-with-pair "~"))
  (defun sp-wrap-slash () (interactive) (sp-wrap-with-pair "/"))
  (defun sp-wrap-star () (interactive) (sp-wrap-with-pair "*"))
  (defun sp-wrap-plus () (interactive) (sp-wrap-with-pair "+"))
#+end_src

** tab-out
When you press tab, jump out from the current enclosing parens/quotes etc. When there is no enclosing stuff, TAB key automatically fallbacks to it's default behavior.

#+begin_src emacs-lisp
  (use-package tab-jump-out
    :ensure t
    :diminish
    :quelpa (tab-jump-out
             :fetcher github
             :repo "zhangkaiyulw/tab-jump-out")
    :config
    ;; This is not defined as a global minor mode, so define one and enable it
    (define-globalized-minor-mode global-tab-jump-out-mode tab-jump-out-mode
      (lambda ()
        (tab-jump-out-mode)
        (push "/" tab-jump-out-delimiters)
        (push "=" tab-jump-out-delimiters)))
    (global-tab-jump-out-mode 1))
#+end_src

** beacon
It helps you to find your cursor when you change buffers/windows etc with a little animation.

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  (setq beacon-blink-duration 0.5
        beacon-push-mark 50
        beacon-color "#9F72D9"))
#+end_src

** highlight-thing
Automatically highlights the symbol under the cursor in the buffer. Simply use evils ~*~ and ~#~ to jump between them.

#+begin_src emacs-lisp
  (use-package highlight-thing
    :ensure t
    :config
    (setq highlight-thing-prefer-active-region t
          ;; ^ Highlight the selected text in visual mode
          highlight-thing-ignore-list '("False" "True" "->" "::" "defun" "def"))
    (add-hook 'prog-mode-hook 'highlight-thing-mode))
#+end_src

** dumb-jump
Jumps to definition by using regex, generally works. Use =gd=.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    ;;(setq dumb-jump-prefer-searcher 'rg)
    (setq dumb-jump-force-searcher 'ag
          dumb-jump-ignore-context t
          dumb-jump-fallback-search nil)
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

** TODO dumb jump to documentation
- devdocs.io?
- hoogle?
** elfeed
#+begin_src emacs-lisp
    ;; TODO: experiment with custom faces
    ;; (defface elfeed-comic
    ;;   '((t :foreground "#BFF"))
    ;;   "Marks comics in Elfeed."
    ;;   :group 'elfeed)
    ;;
    ;; (push '(comic elfeed-comic)
    ;;       elfeed-search-face-alist)

    (defun isamert/elfeed-auto-tag-url (pairs)
      "Takes a list of url-regex and tag-list pairs and adds a new entry hook for each of them."
      (--map
       (add-hook 'elfeed-new-entry-hook
                 (elfeed-make-tagger :feed-url (car it)
                                     :add (cdr it)))
       pairs))

    (defun isamert/elfeed-auto-tag-title (pairs)
      "Takes a list of title-regex and tag-list pairs and adds a new entry hook for each of them."
      (--map
       (add-hook 'elfeed-new-entry-hook
                 (elfeed-make-tagger :entry-title (car it)
                                     :add (cdr it)))
       pairs))

    ;; https://github.com/skeeto/.emacs.d/blob/master/etc/feed-setup.el
    (defvar youtube-feed-format
      '(("^UC" . "https://www.youtube.com/feeds/videos.xml?channel_id=%s")
        ("^PL" . "https://www.youtube.com/feeds/videos.xml?playlist_id=%s")
        (""    . "https://www.youtube.com/feeds/videos.xml?user=%s")))

    (defun isamert/elfeed--expand (listing)
      "Expand feed URLs depending on their tags."
      (cl-destructuring-bind (url . tags) listing
        (cond
         ((member 'youtube tags)
          (let* ((case-fold-search nil)
                 (test (lambda (s r) (string-match-p r s)))
                 (format (cl-assoc url youtube-feed-format :test test)))
            (cons (format (cdr format) url) tags)))
          ((member 'reddit tags) (cons (format "https://www.reddit.com/r/%s/.rss" url) tags))
         (listing))))

    (defmacro isamert/elfeed-config (&rest feeds)
      "Minimizes feed listing indentation without being weird about it."
      (declare (indent 0))
      `(setf elfeed-feeds (mapcar #'isamert/elfeed--expand ',feeds)))

   (use-package elfeed
      :ensure t
      :config
      ;; When adding tags, don't add any hierarchical tags like (blog blog-software), or (metal metal-black)
      ;; Just use something like: (blog software) and (metal black)
      (isamert/elfeed-config
        ("https://www.archlinux.org/feeds/news/" update linux)

        ("http://nullprogram.com/feed/" blog dev)
        ("http://xenodium.com/rss.xml" blog dev)
        ("https://eli.thegreenplace.net/feeds/all.atom.xml" blog dev)
        ("https://drewdevault.com/feed.xml" blog dev)
        ("https://haskell-explained.gitlab.io/blog/feeds/rss.xml" blog dev haskell)
        ("http://www.haskellforall.com/feeds/posts/default" blog dev haskell)
        ("https://chrispenner.ca/atom.xml" blog dev haskell)
        ("https://emacsredux.com/atom.xml" blog emacs)
        ("https://lexi-lambda.github.io/feeds/all.rss.xml" blog dev haskell)
        ("https://jaspervdj.be/rss.xml" blog dev haskell)
        ("https://blog.m-ou.se/index.xml" blog dev rust)
        ("http://xion.io/feeds/atom.xml" blog dev rust)
        ("https://ag91.github.io/rss.xml" blog dev emacs)
        ("https://chrisdone.com/rss.xml" blog dev haskell)
        ("https://two-wrongs.com/feed" blog dev)
        ("https://beepb00p.xyz/rss.xml" blog dev)

        ("https://old.reddit.com/r/gwern/search.rss?q=flair:'Gwern'&sort=new&restrict_sr=on" blog essay)
        ("https://www.lesswrong.com/feed.xml?view=curated-rss" blog essay)

        ("http://explosm.net/rss" comic)

        ("BlackMetalUpdates" youtube music metal black)
        ("XOdiumNostrumX" youtube music metal extreme)
        ("ForgottenChants" youtube music metal extreme folk)
        ("UCUIIM9pPaSdRg7xquOX7s-w" youtube music metal power) ;; Unknown Power Metal YT
        ("UCzCWehBejA23yEz3zp7jlcg" youtube music metal black) ;; Black Metal Promotion
        ("UCZQHDXu4JvsmptR86XDyaRQ" youtube music metal heavy classic) ;; Rare & Obsucre Metal Archives

        ("commandline" reddit linux cli)

        ("UCyoQK-mZXr2ws4C0nXGCH1w" youtube philosophy) ;; Zero Books
        ("UCSkzHxIcfoEr69MWBdo0ppg" youtube philosophy) ;; Cuck philosophy
        ("thephilosophytube" youtube fun philosophy)
        ("ContraPoints" youtube fun philosophy)
        ("UC738SsV6BSLUVvMgKnEFFzQ" youtube philosophy) ;; Epoch Philosophy
        ("ShaunandnotJen" youtube philosophy commentary) ;; Shaun
        ("UCkS_HP3m9NXOgswVAKbMeJQ" youtube philosophy) ;; Then & Now
        ("UCjnpuIGovFFUBLG5BeHzTag" youtube philosophy podcast) ;; Philosophize This
        ("aliabdaal" youtube vlog)
        ("UCYO_jab_esuFRV4b17AJtAw" youtube fun science animation) ; 3Blue1Brown
        ("UCsXVk37bltHxD1rDPwtNM8Q" youtube fun science animation) ;; Kurzgesagt – In a Nutshel
        ("numberphile" youtube fun science)
        ("UC0uTPqBCFIpZxlz_Lv1tk_g" youtube emacs dev) ;; Protesilaos Stavrou
        ("UC2NXVB__-v-hf-l6wcg1zjQ" youtube linux dev cli) ;; Tom on the internet
        ("UC2eYFnH61tmytImy1mTYvhA" youtube linux cli) ;; Luke Smith
        ("OmegaDungeon" youtube linux cli) ;; Brodie Robertson
        ("UCEbYhDd6c6vngsF5PQpFVWg" youtube dev haskell) ;; Tsoding
        ("UCUgxpaK7ySR-z6AXA5-uDuw" youtube dev haskell) ;; Haskell at Work
        ("MentalOutlawStudios" youtube cli linux)
        ("UCbnGhYfkxiZdOPrZg4RBevw" youtube emacs cli linux) ;; Ravar's Path
        ("polyglut" youtube emacs) ;; Xah Lee
        ("babyWOGUE" youtube linux fun)
        ("UC8ENHE5xdFSwx71u3fDH5Xw" youtube vim cli dev) ;; ThePrimeagen
        ("mzamansky" youtube emacs)
        ("YourMovieSucksDOTorg" youtube fun movie)
        ("RedLetterMedia" youtube fun movie)
        ("MrDanielmac" youtube movie)
        ("CineFix" youtube movie fun)
        ("hotbananastud" youtube fun skit) ;; Brandon Rogers
        ("ilkercanikligil" youtube fun turkce) ;; Flu TV
        ("199sokak" youtube fun turkish skit) ;; Kamusal Mizah
        ("UC3Xu0FQeizzXhUtthFjFs8g" youtube fun skit vlog) ;; Deniz Bagdas
        ("codyko69" youtube fun commentary)
        ("conmech" youtube fun turkce) ;; Efe Aydal
        ("tvMisha" youtube fun turkce vlog)

        ("UCWXCrItCF6ZgXrdozUS-Idw" youtube fun animation) ; ExplosmEntertainment
      )

      (isamert/elfeed-auto-tag-url '(("youtube\\.com" youtube)))
      (isamert/elfeed-auto-tag-title '(("youtube\\.com" youtube)
                                       ("c\\+\\+"  (programming c++))
                                       ("python"   (programming python))
                                       ("haskell"  (programming haskell))))


      ;; To apply hooks to all existing entries, use: elfeed-apply-hooks-now

      (evil-define-key 'normal elfeed-search-mode-map
        (kbd "RET") 'elfeed-search-show-entry
        (kbd "S-<return>") 'elfeed-search-browse-url
        "o" 'elfeed-search-browse-url
        "y" 'elfeed-search-yank

        ;; refresh
        "R" 'elfeed-search-fetch
        "r" 'elfeed-search-update--force

        ;; filter
        ;;   - examples:
        ;;     - +tag OR -tag (unread is also a tag)
        ;;     - #number-of-entries-limit (like #20)
        ;;     - !inverse-regex (!x?emacs will filter out titles containing x?emacs regex)
        ;;     - =regex (entries that contains the regex will be shown)
        ;;     - +unread +youtube =emacs #10 @5-months-ago
        "s" 'elfeed-search-live-filter
        "S" 'elfeed-search-set-filter

        "q" 'elfeed-search-quit-window)

      (evil-define-key '(normal visual) elfeed-search-mode-map
        "+" 'elfeed-search-tag-all
        "-" 'elfeed-search-untag-all
        "t" 'elfeed-search-tag-all
        "T" 'elfeed-search-untag-all
        "A" 'elfeed-search-tag-all-unread
        "a" 'elfeed-search-untag-all-unread
        "U" 'elfeed-search-tag-all-unread
        "u" 'elfeed-search-untag-all-unread)

      (evil-define-key 'normal elfeed-show-mode-map
        (kbd "S-<return>") 'elfeed-show-visit
        "go" 'elfeed-show-visit

        (kbd "<tab>") 'elfeed-show-next-link

        ;; filter
        "s" 'elfeed-show-new-live-search

        ;; +/- like the tag search syntax
        "+" 'elfeed-show-tag
        "-" 'elfeed-show-untag
        "t" 'elfeed-show-tag
        "T" 'elfeed-show-untag

        "]]" 'elfeed-show-next
        "[[" 'elfeed-show-prev
        "gj" 'elfeed-show-next
        "gk" 'elfeed-show-prev

        ;; refresh
        "gr" 'elfeed-show-refresh

        ;; quit
        "q" 'elfeed-kill-buffer))

  (use-package elfeed-web
    :ensure t)
#+end_src

** eradio
Play internet radios.

#+begin_src emacs-lisp
  (use-package eradio
    :ensure t
    :diminish
    :quelpa (eradio
             :fetcher github
             :repo "isamert/eradio")
    :config
    (evil-leader/set-key
      "err" 'eradio-toggle
      "erR" 'eradio-random-channel
      "erp" 'eradio-play
      "erk" 'eradio-kill-song-title
      "erl" 'eradio-log-song-title
      "ers" 'eradio-show-song-title
      "ers" 'eradio-stop)

    (setq eradio-log-path "~/Documents/notes/songs.org")
    (setq eradio-mpv-socket "/tmp/eradio-socket")
    (setq eradio-player `("mpv" "--no-video" "--no-terminal" ,(concat "--input-ipc-server=" eradio-mpv-socket)))
    (setq eradio-channels '(("racap.ru // ambient"              . "http://79.111.119.111:8002/ambient")
                            ("racap.ru // anime"                . "http://79.111.119.111:8002/anime")
                            ("racap.ru // avantgardejazz"       . "http://79.111.119.111:8002/avantgardejazz")
                            ("racap.ru // avantprog"            . "http://79.111.119.111:8002/avantprog")
                            ("racap.ru // breakcore"            . "http://79.111.119.111:8002/breakcore")
                            ("racap.ru // brutaldeathmetal"     . "http://79.111.119.111:8002/brutaldeathmetal")
                            ("racap.ru // clubdance"            . "http://79.111.119.111:8002/clubdance")
                            ("racap.ru // contemporaryjazz"     . "http://79.111.119.111:8002/contemporaryjazz")
                            ("racap.ru // countryrock"          . "http://79.111.119.111:8002/countryrock")
                            ("racap.ru // darkcabaret"          . "http://79.111.119.111:8002/darkcabaret")
                            ("racap.ru // darkfolk"             . "http://79.111.119.111:8002/darkfolk")
                            ("racap.ru // darkmetal"            . "http://79.111.119.111:8002/darkmetal")
                            ("racap.ru // darkpsytrance"        . "http://79.111.119.111:8002/darkpsytrance")
                            ("racap.ru // droneambient"         . "http://79.111.119.111:8002/droneambient")
                            ("racap.ru // dsbm"                 . "http://79.111.119.111:8002/dsbm")
                            ("racap.ru // electro"              . "http://79.111.119.111:8002/electro")
                            ("racap.ru // electroindustrial"    . "http://79.111.119.111:8002/electroindustrial")
                            ("racap.ru // electronicore"        . "http://79.111.119.111:8002/electronicore")
                            ("racap.ru // epicmetal"            . "http://79.111.119.111:8002/epicmetal")
                            ("racap.ru // eurodisco"            . "http://79.111.119.111:8002/eurodisco")
                            ("racap.ru // eurohouse"            . "http://79.111.119.111:8002/eurohouse")
                            ("racap.ru // experimentalmusic"    . "http://79.111.119.111:8002/experimentalmusic")
                            ("racap.ru // funk"                 . "http://79.111.119.111:8002/funk")
                            ("racap.ru // indieelectronic"      . "http://79.111.119.111:8002/indieelectronic")
                            ("racap.ru // instrumentalmetal"    . "http://79.111.119.111:8002/instrumentalmetal")
                            ("racap.ru // jazzfusion"           . "http://79.111.119.111:8002/jazzfusion")
                            ("racap.ru // jazzrock"             . "http://79.111.119.111:8002/jazzrock")
                            ("racap.ru // latinjazz"            . "http://79.111.119.111:8002/latinjazz")
                            ("racap.ru // liquidfunk"           . "http://79.111.119.111:8002/liquidfunk")
                            ("racap.ru // melodicblackmetal"    . "http://79.111.119.111:8002/melodicblackmetal")
                            ("racap.ru // melodicheavy"         . "http://79.111.119.111:8002/melodicheavy")
                            ("racap.ru // melodicpower"         . "http://79.111.119.111:8002/melodicpower")
                            ("racap.ru // middleeast"           . "http://79.111.119.111:8002/middleeast")
                            ("racap.ru // mintechhouse"         . "http://79.111.119.111:8002/mintechhouse")
                            ("racap.ru // nativeamerican"       . "http://79.111.119.111:8002/nativeamerican")
                            ("racap.ru // neoclassicalmetal"    . "http://79.111.119.111:8002/neoclassicalmetal")
                            ("racap.ru // neoprogrock"          . "http://79.111.119.111:8002/neoprogrock")
                            ("racap.ru // neurofunk"            . "http://79.111.119.111:8002/neurofunk")
                            ("racap.ru // nudisco"              . "http://79.111.119.111:8002/nudisco")
                            ("racap.ru // orientalmetal"        . "http://79.111.119.111:8002/orientalmetal")
                            ("racap.ru // paganmetal"           . "http://79.111.119.111:8002/paganmetal")
                            ("racap.ru // pianojazz"            . "http://79.111.119.111:8002/pianojazz")
                            ("racap.ru // postgrunge"           . "http://79.111.119.111:8002/postgrunge")
                            ("racap.ru // posthardcore"         . "http://79.111.119.111:8002/posthardcore")
                            ("racap.ru // progdeath"            . "http://79.111.119.111:8002/progdeath")
                            ("racap.ru // proghouse"            . "http://79.111.119.111:8002/proghouse")
                            ("racap.ru // progpowermetal"       . "http://79.111.119.111:8002/progpowermetal")
                            ("racap.ru // progressiverock"      . "http://79.111.119.111:8002/progressiverock")
                            ("racap.ru // psychedelicrock"      . "http://79.111.119.111:8002/psychedelicrock")
                            ("racap.ru // psychobilly"          . "http://79.111.119.111:8002/psychobilly")
                            ("racap.ru // psytrance"            . "http://79.111.119.111:8002/psytrance")
                            ("racap.ru // shoegazing"           . "http://79.111.119.111:8002/shoegazing")
                            ("racap.ru // siberia"              . "http://79.111.119.111:8002/siberia")
                            ("racap.ru // soulfulhouse"         . "http://79.111.119.111:8002/soulfulhouse")
                            ("racap.ru // spacemusic"           . "http://79.111.119.111:8002/spacemusic")
                            ("racap.ru // spacerock"            . "http://79.111.119.111:8002/spacerock")
                            ("racap.ru // speedmetal"           . "http://79.111.119.111:8002/speedmetal")
                            ("racap.ru // stonerrock"           . "http://79.111.119.111:8002/stonerrock")
                            ("racap.ru // surfrock"             . "http://79.111.119.111:8002/surfrock")
                            ("racap.ru // symphonicblackmetal"  . "http://79.111.119.111:8002/symphonicblackmetal")
                            ("racap.ru // upliftingtrance"      . "http://79.111.119.111:8002/upliftingtrance")

                            ("radcap.ru // aabmds"            . "http://79.120.39.202:8002/aabmds")
                            ("radcap.ru // acousticguitar"    . "http://79.120.39.202:8002/acousticguitar")
                            ("radcap.ru // africanfolk"       . "http://79.120.39.202:8002/africanfolk")
                            ("radcap.ru // altrock"           . "http://79.120.39.202:8002/altrock")
                            ("radcap.ru // arabicpop"         . "http://79.120.39.202:8002/arabicpop")
                            ("radcap.ru // artrock"           . "http://79.120.39.202:8002/artrock")
                            ("radcap.ru // balkan"            . "http://79.120.39.202:8002/balkan")
                            ("radcap.ru // bardru"            . "http://79.120.39.202:8002/bardru")
                            ("radcap.ru // bigband"           . "http://79.120.39.202:8002/bigband")
                            ("radcap.ru // bluesrock"         . "http://79.120.39.202:8002/bluesrock")
                            ("radcap.ru // breakbeat"         . "http://79.120.39.202:8002/breakbeat")
                            ("radcap.ru // britpop"           . "http://79.120.39.202:8002/britpop")
                            ("radcap.ru // chamberjazz"       . "http://79.120.39.202:8002/chamberjazz")
                            ("radcap.ru // chorus"            . "http://79.120.39.202:8002/chorus")
                            ("radcap.ru // classpiano"        . "http://79.120.39.202:8002/classpiano")
                            ("radcap.ru // cooljazz"          . "http://79.120.39.202:8002/cooljazz")
                            ("radcap.ru // crust"             . "http://79.120.39.202:8002/crust")
                            ("radcap.ru // darkambient"       . "http://79.120.39.202:8002/darkambient")
                            ("radcap.ru // darkdubstep"       . "http://79.120.39.202:8002/darkdubstep")
                            ("radcap.ru // darkelectro"       . "http://79.120.39.202:8002/darkelectro")
                            ("radcap.ru // darkjazz"          . "http://79.120.39.202:8002/darkjazz")
                            ("radcap.ru // deathdoom"         . "http://79.120.39.202:8002/deathdoom")
                            ("radcap.ru // deephouse"         . "http://79.120.39.202:8002/deephouse")
                            ("radcap.ru // dixieland"         . "http://79.120.39.202:8002/dixieland")
                            ("radcap.ru // dreamtrance"       . "http://79.120.39.202:8002/dreamtrance")
                            ("radcap.ru // dronemetal"        . "http://79.120.39.202:8002/dronemetal")
                            ("radcap.ru // drumstep"          . "http://79.120.39.202:8002/drumstep")
                            ("radcap.ru // dubstep"           . "http://79.120.39.202:8002/dubstep")
                            ("radcap.ru // dubtechno"         . "http://79.120.39.202:8002/dubtechno")
                            ("radcap.ru // electroclash"      . "http://79.120.39.202:8002/electroclash")
                            ("radcap.ru // erotic"            . "http://79.120.39.202:8002/erotic")
                            ("radcap.ru // ethnojazz"         . "http://79.120.39.202:8002/ethnojazz")
                            ("radcap.ru // ethnotronica"      . "http://79.120.39.202:8002/ethnotronica")
                            ("radcap.ru // eurobeat"          . "http://79.120.39.202:8002/eurobeat")
                            ("radcap.ru // eurodance"         . "http://79.120.39.202:8002/eurodance")
                            ("radcap.ru // folkmetal"         . "http://79.120.39.202:8002/folkmetal")
                            ("radcap.ru // futuregarage"      . "http://79.120.39.202:8002/futuregarage")
                            ("radcap.ru // futurepop"         . "http://79.120.39.202:8002/futurepop")
                            ("radcap.ru // gangstarap"        . "http://79.120.39.202:8002/gangstarap")
                            ("radcap.ru // glam"              . "http://79.120.39.202:8002/glam")
                            ("radcap.ru // goatrance"         . "http://79.120.39.202:8002/goatrance")
                            ("radcap.ru // groovemetal"       . "http://79.120.39.202:8002/groovemetal")
                            ("radcap.ru // grunge"            . "http://79.120.39.202:8002/grunge")
                            ("radcap.ru // hammond"           . "http://79.120.39.202:8002/hammond")
                            ("radcap.ru // hardcoretech"      . "http://79.120.39.202:8002/hardcoretech")
                            ("radcap.ru // harpblues"         . "http://79.120.39.202:8002/harpblues")
                            ("radcap.ru // heavypsych"        . "http://79.120.39.202:8002/heavypsych")
                            ("radcap.ru // indiancinema"      . "http://79.120.39.202:8002/indiancinema")
                            ("radcap.ru // indierock"         . "http://79.120.39.202:8002/indierock")
                            ("radcap.ru // industrialmetal"   . "http://79.120.39.202:8002/industrialmetal")
                            ("radcap.ru // instrumentalrock"  . "http://79.120.39.202:8002/instrumentalrock")
                            ("radcap.ru // jazzfunk"          . "http://79.120.39.202:8002/jazzfunk")
                            ("radcap.ru // jazzpop"           . "http://79.120.39.202:8002/jazzpop")
                            ("radcap.ru // jazzrap"           . "http://79.120.39.202:8002/jazzrap")
                            ("radcap.ru // klezmer"           . "http://79.120.39.202:8002/klezmer")
                            ("radcap.ru // leftfield"         . "http://79.120.39.202:8002/leftfield")
                            ("radcap.ru // mathmetal"         . "http://79.120.39.202:8002/mathmetal")
                            ("radcap.ru // mathrock"          . "http://79.120.39.202:8002/mathrock")
                            ("radcap.ru // metalcore"         . "http://79.120.39.202:8002/metalcore")
                            ("radcap.ru // mintechno"         . "http://79.120.39.202:8002/mintechno")
                            ("radcap.ru // modernclassical"   . "http://79.120.39.202:8002/modernclassical")
                            ("radcap.ru // musicgame"         . "http://79.120.39.202:8002/musicgame")
                            ("radcap.ru // neoclassical"      . "http://79.120.39.202:8002/neoclassical")
                            ("radcap.ru // newwave"           . "http://79.120.39.202:8002/newwave")
                            ("radcap.ru // noise"             . "http://79.120.39.202:8002/noise")
                            ("radcap.ru // noiserock"         . "http://79.120.39.202:8002/noiserock")
                            ("radcap.ru // opera"             . "http://79.120.39.202:8002/opera")
                            ("radcap.ru // pop80"             . "http://79.120.39.202:8002/pop80")
                            ("radcap.ru // postmetal"         . "http://79.120.39.202:8002/postmetal")
                            ("radcap.ru // postpunk"          . "http://79.120.39.202:8002/postpunk")
                            ("radcap.ru // progtrance"        . "http://79.120.39.202:8002/progtrance")
                            ("radcap.ru // psyprog"           . "http://79.120.39.202:8002/psyprog")
                            ("radcap.ru // reggae"            . "http://79.120.39.202:8002/reggae")
                            ("radcap.ru // relaxation"        . "http://79.120.39.202:8002/relaxation")
                            ("radcap.ru // retrowave"         . "http://79.120.39.202:8002/retrowave")
                            ("radcap.ru // romantic"          . "http://79.120.39.202:8002/romantic")
                            ("radcap.ru // salsa"             . "http://79.120.39.202:8002/salsa")
                            ("radcap.ru // smoothjazz"        . "http://79.120.39.202:8002/smoothjazz")
                            ("radcap.ru // soul"              . "http://79.120.39.202:8002/soul")
                            ("radcap.ru // spacesynth"        . "http://79.120.39.202:8002/spacesynth")
                            ("radcap.ru // strings"           . "http://79.120.39.202:8002/strings")
                            ("radcap.ru // swing"             . "http://79.120.39.202:8002/swing")
                            ("radcap.ru // symphorock"        . "http://79.120.39.202:8002/symphorock")
                            ("radcap.ru // tango"             . "http://79.120.39.202:8002/tango")
                            ("radcap.ru // vocaljazz"         . "http://79.120.39.202:8002/vocaljazz")
                            ("radcap.ru // vocaltrance"       . "http://79.120.39.202:8002/vocaltrance")

                            ("radcap.ru // 60collection"        . "http://213.141.131.10:8002/60collection")
                            ("radcap.ru // 70collection"        . "http://213.141.131.10:8002/70collection")
                            ("radcap.ru // 90collection"        . "http://213.141.131.10:8002/90collection")
                            ("radcap.ru // acoustic"            . "http://213.141.131.10:8002/acoustic")
                            ("radcap.ru // americana"           . "http://213.141.131.10:8002/americana")
                            ("radcap.ru // andean"              . "http://213.141.131.10:8002/andean")
                            ("radcap.ru // atmosphericdoom"     . "http://213.141.131.10:8002/atmosphericdoom")
                            ("radcap.ru // avantrock"           . "http://213.141.131.10:8002/avantrock")
                            ("radcap.ru // balearichouse"       . "http://213.141.131.10:8002/balearichouse")
                            ("radcap.ru // bigroomhouse"        . "http://213.141.131.10:8002/bigroomhouse")
                            ("radcap.ru // caucasus"            . "http://213.141.131.10:8002/caucasus")
                            ("radcap.ru // chamber"             . "http://213.141.131.10:8002/chamber")
                            ("radcap.ru // chants"              . "http://213.141.131.10:8002/chants")
                            ("radcap.ru // chicanorap"          . "http://213.141.131.10:8002/chicanorap")
                            ("radcap.ru // christianrock"       . "http://213.141.131.10:8002/christianrock")
                            ("radcap.ru // clarinet"            . "http://213.141.131.10:8002/clarinet")
                            ("radcap.ru // classavant"          . "http://213.141.131.10:8002/classavant")
                            ("radcap.ru // classguitar"         . "http://213.141.131.10:8002/classguitar")
                            ("radcap.ru // clavecin"            . "http://213.141.131.10:8002/clavecin")
                            ("radcap.ru // cloudrap"            . "http://213.141.131.10:8002/cloudrap")
                            ("radcap.ru // cpop"                . "http://213.141.131.10:8002/cpop")
                            ("radcap.ru // crossoverjazz"       . "http://213.141.131.10:8002/crossoverjazz")
                            ("radcap.ru // dancepunk"           . "http://213.141.131.10:8002/dancepunk")
                            ("radcap.ru // detroittechno"       . "http://213.141.131.10:8002/detroittechno")
                            ("radcap.ru // ecmrecords"          . "http://213.141.131.10:8002/ecmrecords")
                            ("radcap.ru // edmtrap"             . "http://213.141.131.10:8002/edmtrap")
                            ("radcap.ru // electroswing"        . "http://213.141.131.10:8002/electroswing")
                            ("radcap.ru // electrotechno"       . "http://213.141.131.10:8002/electrotechno")
                            ("radcap.ru // enigmatic"           . "http://213.141.131.10:8002/enigmatic")
                            ("radcap.ru // ethereal"            . "http://213.141.131.10:8002/ethereal")
                            ("radcap.ru // europeanfolk"        . "http://213.141.131.10:8002/europeanfolk")
                            ("radcap.ru // experimentaltechno"  . "http://213.141.131.10:8002/experimentaltechno")
                            ("radcap.ru // fado"                . "http://213.141.131.10:8002/fado")
                            ("radcap.ru // fieldrecording"      . "http://213.141.131.10:8002/fieldrecording")
                            ("radcap.ru // folkpop"             . "http://213.141.131.10:8002/folkpop")
                            ("radcap.ru // folkpunk"            . "http://213.141.131.10:8002/folkpunk")
                            ("radcap.ru // forestpsytrance"     . "http://213.141.131.10:8002/forestpsytrance")
                            ("radcap.ru // frenchrap"           . "http://213.141.131.10:8002/frenchrap")
                            ("radcap.ru // funkrock"            . "http://213.141.131.10:8002/funkrock")
                            ("radcap.ru // funkyhouse"          . "http://213.141.131.10:8002/funkyhouse")
                            ("radcap.ru // futurebass"          . "http://213.141.131.10:8002/futurebass")
                            ("radcap.ru // germanrap"           . "http://213.141.131.10:8002/germanrap")
                            ("radcap.ru // hardcorepunk"        . "http://213.141.131.10:8002/hardcorepunk")
                            ("radcap.ru // hardhouse"           . "http://213.141.131.10:8002/hardhouse")
                            ("radcap.ru // harp"                . "http://213.141.131.10:8002/harp")
                            ("radcap.ru // healing"             . "http://213.141.131.10:8002/healing")
                            ("radcap.ru // honkytonk"           . "http://213.141.131.10:8002/honkytonk")
                            ("radcap.ru // idmambient"          . "http://213.141.131.10:8002/idmambient")
                            ("radcap.ru // illbient"            . "http://213.141.131.10:8002/illbient")
                            ("radcap.ru // italopop"            . "http://213.141.131.10:8002/italopop")
                            ("radcap.ru // jazzmetal"           . "http://213.141.131.10:8002/jazzmetal")
                            ("radcap.ru // jumpblues"           . "http://213.141.131.10:8002/jumpblues")
                            ("radcap.ru // jungle"              . "http://213.141.131.10:8002/jungle")
                            ("radcap.ru // louisianablues"      . "http://213.141.131.10:8002/louisianablues")
                            ("radcap.ru // lovesongs"           . "http://213.141.131.10:8002/lovesongs")
                            ("radcap.ru // manele"              . "http://213.141.131.10:8002/manele")
                            ("radcap.ru // mantras"             . "http://213.141.131.10:8002/mantras")
                            ("radcap.ru // medieval"            . "http://213.141.131.10:8002/medieval")
                            ("radcap.ru // medievalfolk"        . "http://213.141.131.10:8002/medievalfolk")
                            ("radcap.ru // medievalmetal"       . "http://213.141.131.10:8002/medievalmetal")
                            ("radcap.ru // memphisrap"          . "http://213.141.131.10:8002/memphisrap")
                            ("radcap.ru // minimalism"          . "http://213.141.131.10:8002/minimalism")
                            ("radcap.ru // modaljazz"           . "http://213.141.131.10:8002/modaljazz")
                            ("radcap.ru // musiqueconcrete"     . "http://213.141.131.10:8002/musiqueconcrete")
                            ("radcap.ru // ndh"                 . "http://213.141.131.10:8002/ndh")
                            ("radcap.ru // nightpsytrance"      . "http://213.141.131.10:8002/nightpsytrance")
                            ("radcap.ru // nitzhonot"           . "http://213.141.131.10:8002/nitzhonot")
                            ("radcap.ru // oceania"             . "http://213.141.131.10:8002/oceania")
                            ("radcap.ru // oldschoolhiphop"     . "http://213.141.131.10:8002/oldschoolhiphop")
                            ("radcap.ru // popsoul"             . "http://213.141.131.10:8002/popsoul")
                            ("radcap.ru // progfolk"            . "http://213.141.131.10:8002/progfolk")
                            ("radcap.ru // progheavy"           . "http://213.141.131.10:8002/progheavy")
                            ("radcap.ru // psychfolk"           . "http://213.141.131.10:8002/psychfolk")
                            ("radcap.ru // reggaeton"           . "http://213.141.131.10:8002/reggaeton")
                            ("radcap.ru // renaissance"         . "http://213.141.131.10:8002/renaissance")
                            ("radcap.ru // sacred"              . "http://213.141.131.10:8002/sacred")
                            ("radcap.ru // singersongwriter"    . "http://213.141.131.10:8002/singersongwriter")
                            ("radcap.ru // slavonicneofolk"     . "http://213.141.131.10:8002/slavonicneofolk")
                            ("radcap.ru // slideguitar"         . "http://213.141.131.10:8002/slideguitar")
                            ("radcap.ru // slowcore"            . "http://213.141.131.10:8002/slowcore")
                            ("radcap.ru // sonata"              . "http://213.141.131.10:8002/sonata")
                            ("radcap.ru // speedheavy"          . "http://213.141.131.10:8002/speedheavy")
                            ("radcap.ru // symphodeath"         . "http://213.141.131.10:8002/symphodeath")
                            ("radcap.ru // symphogoth"          . "http://213.141.131.10:8002/symphogoth")
                            ("radcap.ru // symphopower"         . "http://213.141.131.10:8002/symphopower")
                            ("radcap.ru // techtrance"          . "http://213.141.131.10:8002/techtrance")
                            ("radcap.ru // thirdstream"         . "http://213.141.131.10:8002/thirdstream")
                            ("radcap.ru // thrashblack"         . "http://213.141.131.10:8002/thrashblack")
                            ("radcap.ru // thrashheavy"         . "http://213.141.131.10:8002/thrashheavy")
                            ("radcap.ru // tribalhouse"         . "http://213.141.131.10:8002/tribalhouse")
                            ("radcap.ru // trumpetjazz"         . "http://213.141.131.10:8002/trumpetjazz")
                            ("radcap.ru // turkishpop"          . "http://213.141.131.10:8002/turkishpop")
                            ("radcap.ru // ukhiphop"            . "http://213.141.131.10:8002/ukhiphop")
                            ("radcap.ru // undergroundtechno"   . "http://213.141.131.10:8002/undergroundtechno")
                            ("radcap.ru // violin"              . "http://213.141.131.10:8002/violin")
                            ("radcap.ru // abstracthiphop"      . "http://79.111.14.76:8002/abstracthiphop")
                            ("radcap.ru // acidjazz"            . "http://79.111.14.76:8002/acidjazz")
                            ("radcap.ru // acousticblues"       . "http://79.111.14.76:8002/acousticblues")
                            ("radcap.ru // ambientdub"          . "http://79.111.14.76:8002/ambientdub")
                            ("radcap.ru // aor"                 . "http://79.111.14.76:8002/aor")
                            ("radcap.ru // avantgardemetal"     . "http://79.111.14.76:8002/avantgardemetal")
                            ("radcap.ru // ballroomdance"       . "http://79.111.14.76:8002/ballroomdance")
                            ("radcap.ru // baroque"             . "http://79.111.14.76:8002/baroque")
                            ("radcap.ru // beatdown"            . "http://79.111.14.76:8002/beatdown")
                            ("radcap.ru // bebop"               . "http://79.111.14.76:8002/bebop")
                            ("radcap.ru // blackdeath"          . "http://79.111.14.76:8002/blackdeath")
                            ("radcap.ru // bluegrass"           . "http://79.111.14.76:8002/bluegrass")
                            ("radcap.ru // bossanova"           . "http://79.111.14.76:8002/bossanova")
                            ("radcap.ru // cello"               . "http://79.111.14.76:8002/cello")
                            ("radcap.ru // celtic"              . "http://79.111.14.76:8002/celtic")
                            ("radcap.ru // chamberpop"          . "http://79.111.14.76:8002/chamberpop")
                            ("radcap.ru // chicagoblues"        . "http://79.111.14.76:8002/chicagoblues")
                            ("radcap.ru // chillout"            . "http://79.111.14.76:8002/chillout")
                            ("radcap.ru // crossoverprog"       . "http://79.111.14.76:8002/crossoverprog")
                            ("radcap.ru // dancehall"           . "http://79.111.14.76:8002/dancehall")
                            ("radcap.ru // darktechno"          . "http://79.111.14.76:8002/darktechno")
                            ("radcap.ru // darkwave"            . "http://79.111.14.76:8002/darkwave")
                            ("radcap.ru // deathcore"           . "http://79.111.14.76:8002/deathcore")
                            ("radcap.ru // deathstep"           . "http://79.111.14.76:8002/deathstep")
                            ("radcap.ru // doom"                . "http://79.111.14.76:8002/doom")
                            ("radcap.ru // dreampop"            . "http://79.111.14.76:8002/dreampop")
                            ("radcap.ru // drumbass"            . "http://79.111.14.76:8002/drumbass")
                            ("radcap.ru // dub"                 . "http://79.111.14.76:8002/dub")
                            ("radcap.ru // eastcoastrap"        . "http://79.111.14.76:8002/eastcoastrap")
                            ("radcap.ru // easylistening"       . "http://79.111.14.76:8002/easylistening")
                            ("radcap.ru // ebm"                 . "http://79.111.14.76:8002/ebm")
                            ("radcap.ru // eclecticprog"        . "http://79.111.14.76:8002/eclecticprog")
                            ("radcap.ru // electricblues"       . "http://79.111.14.76:8002/electricblues")
                            ("radcap.ru // electrohouse"        . "http://79.111.14.76:8002/electrohouse")
                            ("radcap.ru // femalemetal"         . "http://79.111.14.76:8002/femalemetal")
                            ("radcap.ru // flamenco"            . "http://79.111.14.76:8002/flamenco")
                            ("radcap.ru // flute"               . "http://79.111.14.76:8002/flute")
                            ("radcap.ru // folkrock"            . "http://79.111.14.76:8002/folkrock")
                            ("radcap.ru // folkrockru"          . "http://79.111.14.76:8002/folkrockru")
                            ("radcap.ru // freejazz"            . "http://79.111.14.76:8002/freejazz")
                            ("radcap.ru // frenchchanson"       . "http://79.111.14.76:8002/frenchchanson")
                            ("radcap.ru // fullon"              . "http://79.111.14.76:8002/fullon")
                            ("radcap.ru // glitch"              . "http://79.111.14.76:8002/glitch")
                            ("radcap.ru // gospel"              . "http://79.111.14.76:8002/gospel")
                            ("radcap.ru // gothicrock"          . "http://79.111.14.76:8002/gothicrock")
                            ("radcap.ru // hardbop"             . "http://79.111.14.76:8002/hardbop")
                            ("radcap.ru // hardcoremetal"       . "http://79.111.14.76:8002/hardcoremetal")
                            ("radcap.ru // hardstyle"           . "http://79.111.14.76:8002/hardstyle")
                            ("radcap.ru // heavymetal"          . "http://79.111.14.76:8002/heavymetal")
                            ("radcap.ru // heavypowermetal"     . "http://79.111.14.76:8002/heavypowermetal")
                            ("radcap.ru // heavyprog"           . "http://79.111.14.76:8002/heavyprog")
                            ("radcap.ru // idm"                 . "http://79.111.14.76:8002/idm")
                            ("radcap.ru // indianfolk"          . "http://79.111.14.76:8002/indianfolk")
                            ("radcap.ru // indiefolk"           . "http://79.111.14.76:8002/indiefolk")
                            ("radcap.ru // industrial"          . "http://79.111.14.76:8002/industrial")
                            ("radcap.ru // lo-fi"               . "http://79.111.14.76:8002/lo-fi")
                            ("radcap.ru // lounge"              . "http://79.111.14.76:8002/lounge")
                            ("radcap.ru // mainstreamjazz"      . "http://79.111.14.76:8002/mainstreamjazz")
                            ("radcap.ru // martialindustrial"   . "http://79.111.14.76:8002/martialindustrial")
                            ("radcap.ru // melodicmetalcore"    . "http://79.111.14.76:8002/melodicmetalcore")
                            ("radcap.ru // metalstep"           . "http://79.111.14.76:8002/metalstep")
                            ("radcap.ru // nujazz"              . "http://79.111.14.76:8002/nujazz")
                            ("radcap.ru // numetal"             . "http://79.111.14.76:8002/numetal")
                            ("radcap.ru // nwobhm"              . "http://79.111.14.76:8002/nwobhm")
                            ("radcap.ru // orthodox"            . "http://79.111.14.76:8002/orthodox")
                            ("radcap.ru // pianoblues"          . "http://79.111.14.76:8002/pianoblues")
                            ("radcap.ru // pianorock"           . "http://79.111.14.76:8002/pianorock")
                            ("radcap.ru // poppunk"             . "http://79.111.14.76:8002/poppunk")
                            ("radcap.ru // postblack"           . "http://79.111.14.76:8002/postblack")
                            ("radcap.ru // postbop"             . "http://79.111.14.76:8002/postbop")
                            ("radcap.ru // postrock"            . "http://79.111.14.76:8002/postrock")
                            ("radcap.ru // progmetalcore"       . "http://79.111.14.76:8002/progmetalcore")
                            ("radcap.ru // psybient"            . "http://79.111.14.76:8002/psybient")
                            ("radcap.ru // rockabilly"          . "http://79.111.14.76:8002/rockabilly")
                            ("radcap.ru // soulblues"           . "http://79.111.14.76:8002/soulblues")
                            ("radcap.ru // souljazz"            . "http://79.111.14.76:8002/souljazz")
                            ("radcap.ru // soundnat"            . "http://79.111.14.76:8002/soundnat")
                            ("radcap.ru // southernrock"        . "http://79.111.14.76:8002/southernrock")
                            ("radcap.ru // symphony"            . "http://79.111.14.76:8002/symphony")
                            ("radcap.ru // texasblues"          . "http://79.111.14.76:8002/texasblues")
                            ("radcap.ru // thrashdeath"         . "http://79.111.14.76:8002/thrashdeath")
                            ("radcap.ru // tradelectronic"      . "http://79.111.14.76:8002/tradelectronic")
                            ("radcap.ru // triphop"             . "http://79.111.14.76:8002/triphop")
                            ("radcap.ru // undergroundrap"      . "http://79.111.14.76:8002/undergroundrap")
                            ("radcap.ru // vikingmetal"         . "http://79.111.14.76:8002/vikingmetal")
                            ("radcap.ru // westernswing"        . "http://79.111.14.76:8002/westernswing")

                            ("radcap.ru // 80ru"                . "http://79.120.77.11:8002/80ru")
                            ("radcap.ru // altmetal"            . "http://79.120.77.11:8002/altmetal")
                            ("radcap.ru // ambienttechno"       . "http://79.120.77.11:8002/ambienttechno")
                            ("radcap.ru // blackdoom"           . "http://79.120.77.11:8002/blackdoom")
                            ("radcap.ru // blackmetal"          . "http://79.120.77.11:8002/blackmetal")
                            ("radcap.ru // blues"               . "http://79.120.77.11:8002/blues")
                            ("radcap.ru // brokenbeat"          . "http://79.120.77.11:8002/brokenbeat")
                            ("radcap.ru // chillwave"           . "http://79.120.77.11:8002/chillwave")
                            ("radcap.ru // classcross"          . "http://79.120.77.11:8002/classcross")
                            ("radcap.ru // classical"           . "http://79.120.77.11:8002/classical")
                            ("radcap.ru // clubru"              . "http://79.120.77.11:8002/clubru")
                            ("radcap.ru // country"             . "http://79.120.77.11:8002/country")
                            ("radcap.ru // countryblues"        . "http://79.120.77.11:8002/countryblues")
                            ("radcap.ru // dancepop"            . "http://79.120.77.11:8002/dancepop")
                            ("radcap.ru // deathmetal"          . "http://79.120.77.11:8002/deathmetal")
                            ("radcap.ru // deltablues"          . "http://79.120.77.11:8002/deltablues")
                            ("radcap.ru // disco"               . "http://79.120.77.11:8002/disco")
                            ("radcap.ru // downtempo"           . "http://79.120.77.11:8002/downtempo")
                            ("radcap.ru // frenchpop"           . "http://79.120.77.11:8002/frenchpop")
                            ("radcap.ru // funeraldoom"         . "http://79.120.77.11:8002/funeraldoom")
                            ("radcap.ru // gothicdoom"          . "http://79.120.77.11:8002/gothicdoom")
                            ("radcap.ru // gothicmetal"         . "http://79.120.77.11:8002/gothicmetal")
                            ("radcap.ru // grime"               . "http://79.120.77.11:8002/grime")
                            ("radcap.ru // grindcore"           . "http://79.120.77.11:8002/grindcore")
                            ("radcap.ru // guitarjazz"          . "http://79.120.77.11:8002/guitarjazz")
                            ("radcap.ru // gypsyru"             . "http://79.120.77.11:8002/gypsyru")
                            ("radcap.ru // happyhardcore"       . "http://79.120.77.11:8002/happyhardcore")
                            ("radcap.ru // hardcorerap"         . "http://79.120.77.11:8002/hardcorerap")
                            ("radcap.ru // hardrock"            . "http://79.120.77.11:8002/hardrock")
                            ("radcap.ru // hardtrance"          . "http://79.120.77.11:8002/hardtrance")
                            ("radcap.ru // heavyblues"          . "http://79.120.77.11:8002/heavyblues")
                            ("radcap.ru // hiphop"              . "http://79.120.77.11:8002/hiphop")
                            ("radcap.ru // horrorpunk"          . "http://79.120.77.11:8002/horrorpunk")
                            ("radcap.ru // house"               . "http://79.120.77.11:8002/house")
                            ("radcap.ru // impressionism"       . "http://79.120.77.11:8002/impressionism")
                            ("radcap.ru // industrialrock"      . "http://79.120.77.11:8002/industrialrock")
                            ("radcap.ru // instrumental"        . "http://79.120.77.11:8002/instrumental")
                            ("radcap.ru // instrumentalhiphop"  . "http://79.120.77.11:8002/instrumentalhiphop")
                            ("radcap.ru // jazz"                . "http://79.120.77.11:8002/jazz")
                            ("radcap.ru // manouche"            . "http://79.120.77.11:8002/manouche")
                            ("radcap.ru // mathcore"            . "http://79.120.77.11:8002/mathcore")
                            ("radcap.ru // mcreative"           . "http://79.120.77.11:8002/mcreative")
                            ("radcap.ru // meditation"          . "http://79.120.77.11:8002/meditation")
                            ("radcap.ru // melodicdeath"        . "http://79.120.77.11:8002/melodicdeath")
                            ("radcap.ru // misc"                . "http://79.120.77.11:8002/misc")
                            ("radcap.ru // newage"              . "http://79.120.77.11:8002/newage")
                            ("radcap.ru // oldies"              . "http://79.120.77.11:8002/oldies")
                            ("radcap.ru // organ"               . "http://79.120.77.11:8002/organ")
                            ("radcap.ru // piano"               . "http://79.120.77.11:8002/piano")
                            ("radcap.ru // poetryru"            . "http://79.120.77.11:8002/poetryru")
                            ("radcap.ru // pop"                 . "http://79.120.77.11:8002/pop")
                            ("radcap.ru // popballads"          . "http://79.120.77.11:8002/popballads")
                            ("radcap.ru // poprock"             . "http://79.120.77.11:8002/poprock")
                            ("radcap.ru // popru"               . "http://79.120.77.11:8002/popru")
                            ("radcap.ru // postshanson"         . "http://79.120.77.11:8002/postshanson")
                            ("radcap.ru // powermetal"          . "http://79.120.77.11:8002/powermetal")
                            ("radcap.ru // progmetal"           . "http://79.120.77.11:8002/progmetal")
                            ("radcap.ru // pumpinghouse"        . "http://79.120.77.11:8002/pumpinghouse")
                            ("radcap.ru // punk"                . "http://79.120.77.11:8002/punk")
                            ("radcap.ru // punkru"              . "http://79.120.77.11:8002/punkru")
                            ("radcap.ru // rap"                 . "http://79.120.77.11:8002/rap")
                            ("radcap.ru // rapru"               . "http://79.120.77.11:8002/rapru")
                            ("radcap.ru // rnb"                 . "http://79.120.77.11:8002/rnb")
                            ("radcap.ru // rock"                . "http://79.120.77.11:8002/rock")
                            ("radcap.ru // rockballads"         . "http://79.120.77.11:8002/rockballads")
                            ("radcap.ru // rockroll"            . "http://79.120.77.11:8002/rockroll")
                            ("radcap.ru // rockru"              . "http://79.120.77.11:8002/rockru")
                            ("radcap.ru // rocksteady"          . "http://79.120.77.11:8002/rocksteady")
                            ("radcap.ru // romanceru"           . "http://79.120.77.11:8002/romanceru")
                            ("radcap.ru // russianfolk"         . "http://79.120.77.11:8002/russianfolk")
                            ("radcap.ru // saxophone"           . "http://79.120.77.11:8002/saxophone")
                            ("radcap.ru // schlager"            . "http://79.120.77.11:8002/schlager")
                            ("radcap.ru // shansonru"           . "http://79.120.77.11:8002/shansonru")
                            ("radcap.ru // sludgemetal"         . "http://79.120.77.11:8002/sludgemetal")
                            ("radcap.ru // stonermetal"         . "http://79.120.77.11:8002/stonermetal")
                            ("radcap.ru // straightahead"       . "http://79.120.77.11:8002/straightahead")
                            ("radcap.ru // suomisaundi"         . "http://79.120.77.11:8002/suomisaundi")
                            ("radcap.ru // symphometal"         . "http://79.120.77.11:8002/symphometal")
                            ("radcap.ru // synthpop"            . "http://79.120.77.11:8002/synthpop")
                            ("radcap.ru // techdeathmetal"      . "http://79.120.77.11:8002/techdeathmetal")
                            ("radcap.ru // techno"              . "http://79.120.77.11:8002/techno")
                            ("radcap.ru // thrashmetal"         . "http://79.120.77.11:8002/thrashmetal")
                            ("radcap.ru // trance"              . "http://79.120.77.11:8002/trance")
                            ("radcap.ru // ussr"                . "http://79.120.77.11:8002/ussr")
                            ("radcap.ru // vocal"               . "http://79.120.77.11:8002/vocal")
                            ("radcap.ru // witchhouse"          . "http://79.120.77.11:8002/witchhouse")
                            )))
#+end_src

* Keybindings
Keybindings are generally set in-place, following have no context, so they are here.

** macOS
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; I set the following in Linux using xmodmap but it's kinda
    ;; impossible to do it in OSX I guess.

    ;; I use an external keyboard, this makes AltGr and Meta (Alt) work as expected
    ;; I have also inverted Meta and Control keys system-wide or something, so
    ;; this setting is done according to that.
    (setq ns-option-modifier 'meta
          ns-right-alternate-modifier 'none)

    ;; (define-key key-translition-map ...) is better than (global-define-key ...)
    ;; because this just remaps key everywhere to given key so that the mappings
    ;; works in command mode, isearch etc.
    ;; AltGr + k -> Up
    ;; AltGr + j -> Down
    ;; AltGr + l -> Right
    ;; AltGr + h -> Left
    (define-key key-translation-map (kbd "˚") (kbd "<up>"))
    (define-key key-translation-map (kbd "∆") (kbd "<down>"))
    (define-key key-translation-map (kbd "¬") (kbd "<right>"))
    (define-key key-translation-map (kbd "˙") (kbd "<left>"))

    (define-key key-translation-map (kbd "") (kbd "S-<up>"))
    (define-key key-translation-map (kbd "Ô") (kbd "S-<down>"))
    (define-key key-translation-map (kbd "Ò") (kbd "S-<right>"))
    (define-key key-translation-map (kbd "Ó") (kbd "S-<left>"))

    ;; AltGr + [ -> (
    ;; AltGr + ] -> )
    (define-key key-translation-map (kbd "“") (kbd "("))
    (define-key key-translation-map (kbd "‘") (kbd ")")))
#+end_src

** Some general keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (evil-define-key 'normal 'global
    (kbd "C-s") #'save-buffer)

  (evil-define-key 'normal prog-mode-map
    (kbd "M-;") 'comment-line
    (kbd "M-:") 'comment-dwim
    "gd" 'xref-find-definitions
    "gr" 'xref-find-references)
#+END_SRC

** Better split management
- A-- splits below, A-\ splits right.
- A-h,j,k,l to switch between splits.
- A-H,J,K,L shrink, enlarge split.

#+BEGIN_SRC emacs-lisp
  (defun isamert/split-window-right-vterm ()
    (interactive)
    (split-window-right)
    (other-window 1)
    (vterm))

  (defun isamert/split-window-below-vterm ()
    (interactive)
    (split-window-below)
    (other-window 1)
    (vterm))

  (defun isamert/split-window-below ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun isamert/split-window-right ()
    (interactive)
    (split-window-right)
    (other-window 1))


  (evil-define-key 'normal 'global
    (kbd "M-\\") 'isamert/split-window-right
    (kbd "M-|")  'isamert/split-window-right-vterm
    (kbd "M--")  'isamert/split-window-below
    (kbd "M-_")  'isamert/split-window-below-vterm
    (kbd "M-J")  'enlarge-window
    (kbd "M-K")  'shrink-window
    (kbd "M-L")  'enlarge-window-horizontally
    (kbd "M-H")  'shrink-window-horizontally)

  ;; This is needed to override other modes mappings
  (define-minor-mode movement-map-mode
    "Overrides all major and minor mode keys" t)

  (defvar movement-map (make-sparse-keymap "movement-map")
    "Override all major and minor mode keys")

  (evil-define-key '(normal motion emacs) movement-map
    (kbd "M-j") 'evil-window-down
    (kbd "M-k") 'evil-window-up
    (kbd "M-h") 'evil-window-left
    (kbd "M-l") 'evil-window-right)

  (evil-define-key 'normal treemacs-mode-map
    (kbd "M-j") 'evil-window-down
    (kbd "M-k") 'evil-window-up
    (kbd "M-h") 'evil-window-left
    (kbd "M-l") 'evil-window-right)

  (evil-make-intercept-map movement-map)

  (add-to-list 'emulation-mode-map-alists
               `((movement-map-mode . ,movement-map)))
#+END_SRC

* Language specific
** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  :config
  (evil-define-key 'normal markdown-mode-map
    (kbd "TAB") 'markdown-cycle
    (kbd "]]") 'markdown-outline-next
    (kbd "[[") 'markdown-outline-previous))
#+END_SRC

** python
#+BEGIN_SRC emacs-lisp
  ;; TODO: remove elpy, get the indendation thing that it uses and
  (use-package elpy
    :ensure t
    :init
    :config
    (progn
      (elpy-enable)
      (add-hook 'elpy-mode-hook (lambda nil (which-function-mode nil))) ;; This mode causes IPython to freeze
      (setq elpy-modules (isamert/delq* elpy-modules 'elpy-module-flymake 'elpy-modules-django))))

  ;; https://www.modernemacs.com/post/prettify-mode/
  ;; Also check this: http://www.modernemacs.com/post/python-infix/
  (isamert/prettify-mode
   'python-mode-hook
   '(;; Syntax
     ("def" .      ?ƒ)
     ("!=" .       ?≠)
     ("not" .      #x2757)
     ("in" .       #x2208)
     ("not in" .   #x2209)
     ("yield" .    #x27fb)
     ("for" .      #x2200)
     ;; Base Types
     ("int" .      #x2124)
     ("float" .    #x211d)
     ("True" .     #x1d54b)
     ("False" .    #x1d53d)
     ;; Mypy
     ("Dict" .     #x1d507)
     ("List" .     #x2112)
     ("Tuple" .    #x2a02)
     ("Set" .      #x2126)
     ("Iterable" . #x1d50a)
     ("Any" .      #x2754)
     ("Union" .    #x22c3)))
#+END_SRC

** haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)

  (use-package lsp-haskell
    :ensure t
    :config
    (setq lsp-haskell-process-path-hie "ghcide"
          lsp-haskell-process-args-hie '()))

  (use-package ormolu
    :ensure t
    :hook (haskell-mode . ormolu-format-on-save-mode)
    :bind
    (:map haskell-mode-map
          ("C-c r" . ormolu-format-buffer)))
#+END_SRC

** rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :after (lsp-mode)
  (setq lsp-rust-server 'rust-analyzer
        lsp-rust-clippy-preference 'on))
;; (setq lsp-rust-server 'rls)
#+END_SRC

** javascript
#+BEGIN_SRC emacs-lisp
  (defun isamert/use-eslint-from-node-modules ()
    "Set the eslint exacutable to the one that is found in node_modules and enable flycheck with eslint as the checker."
    (interactive)
    (--> (or (buffer-file-name) default-directory)
         (locate-dominating-file it "node_modules")
         (expand-file-name "node_modules/.bin/eslint" it)
         (if (file-executable-p it)
             (progn
               (setq-local flycheck-javascript-eslint-executable it)
               (flycheck-mode t)
               (flycheck-select-checker 'javascript-eslint))
           (message "eslint not found."))))

  (add-hook 'js-mode-hook #'isamert/use-eslint-from-node-modules)
#+END_SRC

** java
=lsp-java= automatically installs =eclipse.jdt.ls= to get lsp.
#+BEGIN_SRC emacs-lisp
(use-package lsp-java :ensure t :after lsp
  :config (add-hook 'java-mode-hook 'lsp))

(use-package dap-java :after (lsp-java))
#+END_SRC

** emmet-mode
Hit <C-j> after these and get:
- =a= ~<a href="|">|</a>~
- =.x= ~<div class="x"></div>~
- =br/= ~<br />~
- =p.x.y.z= ~<p className="x y z"></p>~ (Works well with JSX)
- ~input[type=text]~ ~<input type="text" name="" value=""/>~
- =a>b>c= ~<a href=""><b><c></c></b></a>~
- =b*3= ~<b></b><b></b><b></b>~
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t
  :hook (js-mode css-mode sgml-mode web-mode)
  :init
  (setq emmet-expand-jsx-className? t
        emmet-self-closing-tag-style " /"))
#+END_SRC

** r
#+BEGIN_SRC emacs-lisp
(use-package ess :ensure t)
#+END_SRC

** kotlin
#+BEGIN_SRC emacs-lisp
(use-package kotlin-mode :ensure t)
#+END_SRC

** gradle/groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.gradle\\'" . groovy-mode)))
#+END_SRC

** yaml
#+begin_src emacs-lisp
(use-package yaml-mode :ensure t)
#+end_src

** typescript
#+begin_src emacs-lisp
(use-package typescript-mode :ensure t)
#+end_src

** json
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)

  (defun isamert/jsons-print-path-python ()
    (interactive)
    (let ((jsons-path-printer 'jsons-print-path-python))
      (jsons-print-path)))

  (defun isamert/jsons-print-path-javascript-js-jq ()
    (interactive)
    (let ((jsons-path-printer 'jsons-print-path-jq))
      (jsons-print-path)))

  ;;  Provides jsons-print-path function, it simply kills the path to the key under point
  (use-package json-snatcher
    :ensure t
    :config
    ;; Copies paths like:.definition.summary.pastGroup.trackingResults[0].trackingItemReferenceId
    ;; I've created two functions above for the variations
    (setq jsons-path-printer 'jsons-print-path-jq))
#+end_src

** elisp
#+begin_src emacs-lisp
  (isamert/prettify-mode 'emacs-lisp-mode-hook
                         '((">="     . ?≥)
                           ("<="     . ?≤)
                           ("defun"  . ?ƒ)
                           ("lambda" . ?λ)))
#+end_src

** dhall
#+begin_src emacs-lisp
  (use-package dhall-mode
    :ensure t
    :diminish dhall-format-on-save-mode
    :mode "\\.dhall\\'"
    :config
    ;; I use dhall-lsp-server, so I don't need this
    (setq dhall-use-header-line nil))
#+end_src

** nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")

  (defun isamert/import-env-from-nix-shell ()
    (interactive)
    (when (not (and (file-exists-p "shell.nix") (executable-find "nix-shell")))
      (error "shell.nix or nix-shell not found."))
    (--> (shell-command-to-string "nix-shell --quiet --run 'env'")
         (split-string it "\n")
         (--map (-let (((name val) (s-split-up-to "=" it 1)))
                  (setenv name val)
                  (when (string-equal name "PATH")
                    (setq exec-path (split-string val path-separator)))
                  `(,name ,val))
                it))
    (message "Done."))
#+end_src

** swift
#+begin_src emacs-lisp
  (use-package swift-mode
    :ensure t)
#+end_src

** scheme
#+begin_src emacs-lisp
  ;; Scheme
  (use-package geiser
    :ensure t
    :init
    (setq geiser-default-implementation 'guile))
#+end_src

* Misc functions
** My Android phone and Emacs
I have an Android phone that is running [[https://termux.com/][Termux]] all the time. If you install Termux through [[https://www.f-droid.org/][F-Droid]] you can also install [[https://f-droid.org/en/packages/com.termux.api/][Termux:API]] package which brings bunch of commands like =termux-clipboard-set=, =termux-sms-list= etc. Much of the commands requires to be called in foreground, so they are not very useful over SSH but you can work around that by starting a =tmux= session on the phone and executing commands on that tmux session through SSH. This way I can send arbitrary text to my phones clipboard using the commands below.

#+begin_src emacs-lisp
  (defvar isamert/phone-hostname
    "mia3"
    "Hostname or local address to connect to my phone by SSH.")

  (defun well/send-text-to-my-phone (text)
    "Send TEXT to my phones clipboard."
    (interactive "sText: ")
    (shell-command-to-string (format "echo '%s' | ssh %s -T 'cat > ~/clip'; ssh mia3 \"tmux send-keys 'cat ~/clip | termux-clipboard-set' ENTER\"" isamert/phone-hostname text)))

  (defun well/send-clipboard-to-my-phone ()
    "Send current clipboard content to my phones clipboard."
    (interactive)
    (well/send-text-to-mia3 (current-kill 0)))
#+end_src
** Google search
#+begin_src emacs-lisp
  (defun isamert/google-this ()
    "Search selected region or current word in Google. Let's you edit the query beforehand."
    (interactive)
    (browse-url
     (format
      "https://google.com/search?q=%s"
      (read-string
       "Googling: "
       (isamert/region-or 'word)))))

  (evil-leader/set-key
    "/g"   'isamert/google-this)
#+end_src

** Google translate
#+begin_src emacs-lisp
  (defun isamert/google-translate-this (from to)
    "Translate selected region or current word from FROM to TO.
  Let's you edit the query beforehand.  Result is printed into minibuffer.
  You need to install `translate-shell' to make this work."
    (interactive
     `(,(read-string "From: " "en") ,(read-string "To: " "tr")))
    (message
     (shell-command-to-string
      (format
       "trans en:tr \"%s\""
       (read-string
        "Translating: "
        (isamert/region-or 'word))))))

  (defun isamert/google-translate-this-en-to-tr ()
    (interactive)
    (isamert/google-translate-this "en" "tr"))

  (defun isamert/google-translate-this-tr-to-en ()
    (interactive)
    (isamert/google-translate-this "tr" "en"))

  (evil-leader/set-key
    "/tt"   'isamert/google-translate-this-en-to-tr
    "/te"   'isamert/google-translate-this-tr-to-en)
#+end_src

** Open one of my special files
=isamert/files= creates a list of my dotfiles and org-files and lets you select one of them.

#+begin_src emacs-lisp
  (defun isamert/org-files ()
    "Find all of the org files in home directory."
    (mapcar
      (lambda (file) (concat org-directory "/" file))
      (if (file-directory-p org-directory)
          (directory-files org-directory nil "^\\w+.*.org$")
           '())))

  (defun isamert/dotfiles ()
    (--> (shell-command-to-string "git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME ls-tree --full-tree -r HEAD | cut -f2")
         (split-string it "\n" t)
         (--map (concat "~/" it) it)))

  (defun isamert/files ()
    "Open one of my special files like my dot-files, org-files etc."
    (interactive)
    (find-file (completing-read "Open: " (append (isamert/org-files) (isamert/dotfiles)))))

  (evil-define-key 'normal 'global (kbd "M-m") 'isamert/files)
#+end_src

** TODO org-mode enhancements
I need to rewrite these two functions using [[https://github.com/isamert/marks][marks]] for both speed and accuracy. Also I should remove the =helm= dependency, I need to figure out a way to keep font colors with selectrum (=consult-flycheck=, =consult-lines= etc. are already doing this.)
#+begin_src emacs-lisp
  ;; Keybindings
  (evil-leader/set-key
    "ol" 'isamert/org-link-header
    "oL" 'isamert/org-backlinks)

  ;;
  ;; Formatting funcs
  ;;

  (defun isamert/b-blue (str)
    (propertize str 'font-lock-face '(:foreground "sky blue" :height 150)))

  (defun isamert/b-green (str)
    (propertize str 'font-lock-face '(:foreground "green" :height 130)))

  (defun isamert/b-yellow (str)
    (propertize str 'font-lock-face '(:foreground "green" :height 130)))

  (defun isamert/b-plum (str)
    (propertize str 'font-lock-face '(:foreground "plum" :height 130)))

  ;;
  ;; Utility
  ;;

  ;; TODO: get keywords dynamically
  ;; TODO: only remove the starts at the beginning of the line
  (defun isamert/org-header-line-to-title (line)
    "Remove TODO/*/unnecessary whitespace from given LINE.
  Then return the title of given `org-mode` header.
  Just like (org-entry-get nil \"ITEM\") but works on given string."
    (--> line
         (s-replace-regexp "\\(\\*\\|TODO\\|PROG\\|DONE\\|WAIT\\)" "" it) ;; Remove TODO states
         (s-replace-regexp "\\(\\[#.\\{1\\}\\]\\\)" "" it) ;; Remove priorities
         (s-replace-regexp ":\\(\\w+:\\)+$"  "" it) ;; Remove tags
         (s-trim it)))

  (defun isamert/org-find-header-of-given-line (file line-number)
    "Find and return the first parent header of given LINE-NUMBER in FILE.
  It returns a list in this format (result-line-number title)."
    (-let* ((line-content (shell-command-to-string (format "sed '%sq;d' %s" line-number file)))
            (search-regexp (if (string-prefix-p "*" line-content)
                               (format "^\\*{%d} " (->> (split-string line-content " ")
                                                        (car)
                                                        (length)
                                                        (1-)))
                             "^\\*"))
            (cmd (format "head -n %s \"%s\" | tac | rg --line-number --max-count 1 '%s'"
                         line-number
                         file
                         search-regexp))
            ((result-line-number . title) (split-string (shell-command-to-string cmd) ":")))
      (message (shell-command-to-string cmd))
      `(,(- (1+ line-number) (string-to-number result-line-number))
        ,(isamert/org-header-line-to-title (string-join title ":")))))

  ;; TODO: probably will be pretty slow
  (defun isamert/org-find-header-hierarchy-of-given-line (file line-number)
    (let ((last-parent-info nil)
          (last-parent-line))
      (while (string= "" last-parent)
        (setq last-parent (isamert/org-find-header-of-given-line file line)))))

  (defun isamert/helm-dummy-source (action-name action)
    (helm-build-dummy-source
     action-name
     :action (helm-make-actions action-name action)))

  ;; I couldn't find a way to make helm return custom input
  ;; as the selected one (na input that is not in the candidates list)
  ;; so I used this solution:
  ;; If ACTION-NAME is supplied and the input is not in the candidates, ACTION
  ;; will be run.
  ;; BUT, if action is something like (lambda (c) c), then the result will be returned.
  (defun isamert/select-one-of (the-candidates &optional buffer-name action-name action)
    (let* ((name (if buffer-name
                     buffer-name
                   "isamert-select"))
           (source-1 (helm-build-sync-source name
                       :candidates the-candidates
                       :fuzzy-match t))
           (source-2 (if action-name `(,(isamert/helm-dummy-source action-name action)) '()))
           (sources (cons source-1 source-2)))
      (helm :buffer (format "*helm-%s*" name)
            :sources sources)))

  ;;
  ;; Main
  ;;

  (defun isamert/org-file-get-header-id (file-path header-line)
    "Return the id of given header at HEADER-LINE in FILE-PATH."
    (interactive)
    (save-excursion
      (with-current-buffer (let ((enable-local-variables  ())) (find-file-noselect file-path))
        (goto-char 0)
        (forward-line header-line)
        (org-id-get nil 'create)
        (save-buffer)
        (org-id-get nil 'create))))

  (defun isamert/org-link-header ()
    "Interactively select a header and insert it as a link into the buffer.
  Headers are gathered from all the org files found in `org-directory'."
    (interactive)
    (-let* ((cmd (concat "cd " org-directory "; "
                         "rg"
                         " --no-heading"
                         " --with-filename"
                         " --line-number"
                         " -t org"
                         " "
                         "\"^\\*+ \" "))
            (headers (--> (shell-command-to-string cmd)
                          (split-string it "\n" t)
                          (-map (lambda (line)
                                  (-let (((file-name line-number . content) (split-string line ":")))
                                    (format "%s:%s %s %s"
                                            (isamert/b-blue file-name)
                                            line-number
                                            (isamert/b-green "»")
                                            (isamert/org-header-line-to-title (string-join content ":")))))
                                it)))
            (selected (isamert/select-one-of headers))
            ((file-name-with-line . header-title) (split-string selected " » "))
            ((file-name header-line) (split-string file-name-with-line ":"))
            (link-name (read-string "Enter link text: " header-title))
            (header-id (isamert/org-file-get-header-id file-name (1- (string-to-number header-line))))
            ;;(selected-link (concat "[[file:" file-name "::" (string-join header-title) "][" link-name "]]")))
            (selected-link (concat "[[id:" header-id "][" link-name "]]")))
      (insert selected-link)))

  ;; FIXME: this does not show backlinks that uses id's
  (defun isamert/org-backlinks ()
    "List all the places that has refered the header under the cursor."
    (interactive)
    (-let* ((curr-file-name (file-name-nondirectory (buffer-file-name)))
            (header-title (org-entry-get nil "ITEM"))
            (cmd (concat
                  "rg"
                  " --line-number"
                  " --with-filename"
                  " --no-heading"
                  " --only-matching"
                  " --ignore-case"
                  " "
                  "'(.{5,50})?\\[\\[file:(\\./)?"
                  curr-file-name
                  "::\\s*\\*?\\s*?"
                  header-title
                  "\s*\\]\\[([^\\[\\]]+)]\\](.{5,50})?' "
                  " --replace"
                  " "
                  "'...$1$3$4...'"
                  ))
            (backlinks (mapcar (lambda (line)
                                 (-let (((file-name line-no . content) (split-string line ":")))
                                   (format "%s:%s » %s » %s"
                                           (isamert/b-blue file-name)
                                           line-no
                                           (->> (string-to-number line-no)
                                                (isamert/org-find-header-of-given-line file-name)
                                                (cadr)
                                                (isamert/b-plum))
                                           (string-join content ":"))))
                               (split-string (shell-command-to-string cmd) "\n" t)))
            (selected (isamert/select-one-of backlinks))
            ((file-name line-no) (split-string selected ":")))
      (find-file file-name)
      (goto-char 0)
      (->> (string-to-number line-no)
           (1-)
           (forward-line))))
#+end_src

** bullet.org
I have a ~bullet.org~ file that I keep my daily journal and here are some utility functions that use with it. I may document this later (or even publish it as a package?)

#+begin_src emacs-lisp
  ;; FIXME: insert short day name while creating the day

  ;; Keybindings
  (evil-leader/set-key
    "obb" 'isamert/bullet-focus-backlog
    "obt" 'isamert/bullet-focus-today
    "obm" 'isamert/bullet-move-todos-yesterday-to-today
    "oby" 'isamert/bullet-focus-yesterday
    "obf" 'isamert/bullet-focus-given-day
    "obc" 'isamert/bullet-create-given-day)

  (defun isamert/today nil
    (format-time-string "%Y-%m-%d %a"))

  (defun isamert/date (date)
    "Display the time described by DATE. DATE can be 'now', 'yesterday', 'two days ago' etc."
    (s-trim-right (shell-command-to-string (concat "date --date='" date "' +'%Y-%m-%d %a'"))))

  (defun isamert/insert-new-line-above (text)
    "Insert a line above the current line with given TEXT."
    (move-beginning-of-line nil)
    (insert "\n")
    (forward-line -1)
    (insert text))

  (defun isamert/insert-new-last-line (text)
    "Insert a new line at the end of the file with given TEXT."
    (goto-char (point-max))
    (if (= (current-column) 0)
        (insert (concat text "\n"))
      (insert (concat "\n" text "\n"))))

  (defun isamert/selected-region-text ()
    (buffer-substring-no-properties (region-beginning) (region-end)))

  (defun isamert/org-remove-subtree ()
    (org-mark-subtree)
    (delete-and-extract-region (region-beginning) (region-end)))


  (defun isamert/bullet-find-a-day (day)
    (let ((day-regex (concat "^\\[" day "\\( \\w+\\)?\\].*"))
          (day-point nil))
      (org-map-entries
       (lambda ()
         (let ((title (org-entry-get nil "ITEM")))
           (when (string-match day-regex title)
             (setq day-point (point-marker)))))
       "LEVEL=1")
      day-point))

  (defun isamert/bullet-find-today ()
    (isamert/bullet-find-a-day (isamert/today)))

  (defun isamert/bullet-create-a-day (date focus)
    (widen)
    (let ((day-entry (isamert/bullet-find-a-day date))
          (day-regex "^\\[\\([0-9]+-[0-9]+-[0-9]+\\)\\( \\w+\\)?\\].*")
          (is-last-older nil)
          (result-date nil)
          (given-date (date-to-time (concat date "T000")))
          (content (concat "* [" date "] [/]")))
      (if day-entry
          (goto-char day-entry)
        (progn
          (org-map-entries
           (lambda ()
             (let ((title (org-entry-get nil "ITEM")))
               (save-match-data
                 (when (string-match day-regex title)
                   (let ((current-date (date-to-time (concat (match-string 1 title) "T000"))))
                     (when (and (not result-date) (time-less-p given-date current-date))
                       (setq result-date (point-marker))
                       ))))))
           "LEVEL=1")
          (if result-date
              (progn
                (goto-char result-date)
                (isamert/insert-new-line-above content))
            (isamert/insert-new-last-line content))
          (when focus
            (org-narrow-to-subtree))))))

  (defun isamert/bullet-create-given-day (focus)
    (interactive "P")
    (isamert/bullet-create-a-day (org-read-date) focus))

  (defun isamert/bullet-focus-a-day (day)
    "Focus to given DAY."
    (widen)
    (let ((day-entry (isamert/bullet-find-a-day day)))
      (when day-entry (progn (goto-char day-entry) (org-narrow-to-subtree)))
      day-entry))

  (defun isamert/bullet-focus-given-day ()
    "Focus given days header.  If it does not exists, create it."
    (interactive)
    (let ((given-date (org-read-date)))
      (when (not (isamert/bullet-focus-a-day given-date))
        (isamert/bullet-create-a-day given-date t))))

  (defun isamert/bullet-focus-today ()
    "Focus todays header.  If it does not exists, create it."
    (interactive)
    (when (not (isamert/bullet-focus-a-day (isamert/today)))
      (isamert/bullet-create-today t)))

  (defun isamert/bullet-focus-yesterday ()
    (interactive)
    (isamert/bullet-focus-a-day (isamert/date "yesterday")))

  (defun isamert/bullet-create-today (focus)
    (interactive "P")
    (isamert/bullet-create-a-day (isamert/today) focus))

  ;; TODO: new line fixes
  (defun isamert/bullet-move-todos-yesterday-to-today ()
    (interactive)
    (isamert/bullet-focus-yesterday)
    (let* ((item-points '())
           (items (org-map-entries
                   (lambda ()
                     (setq item-points (cons (point) item-points))
                     (org-mark-subtree)
                     (isamert/selected-region-text))
                   "LEVEL=2/TODO|PROG")))
      (mapcar (lambda (x)
                (goto-char x)
                (isamert/org-remove-subtree))
              item-points)
      (widen)
      (isamert/bullet-focus-today)
      (goto-char (point-max))
      (mapcar (lambda (item)
                (insert item))
              items)))

  (defun isamert/bullet-focus-backlog ()
    (interactive)
    (widen)
    (goto-char (org-find-exact-headline-in-buffer "Backlog"))
    (org-narrow-to-subtree))
#+end_src

** Scratch/temporary buffers in side windows
Here I define two important functions and their helpers.  The following functions are pretty useful for quick note taking or evaluating elisp. Having these buffers in a side window makes them immune to some window commands which is what I want.

- isamert/display-side-scratch-buffer :: This one opens (or closes if it's open) the *scratch* buffer in a side window, on the right. This is nice for quickly evaluating elisp, taking elisp related notes.
- isamert/display-side-temp-org-buffer :: This one opens (or closes if it's open) the ~temp.org~ file in a in a side window, on the right. This is nice for taking some quick notes, writing some temporary todos etc.

#+begin_src emacs-lisp
  (defun isamert/buffer-visible-p (buffer)
   "Check if given BUFFER is visible or not.  BUFFER is a string representing the buffer name."
    (or (eq buffer (window-buffer (selected-window))) (get-buffer-window buffer)))

  (defun isamert/display-buffer-in-side-window (buffer)
    "Just like `display-buffer-in-side-window` but only takes a BUFFER and rest of the parameters are for my taste."
    (set-window-dedicated-p
     ;; ^ Setting this to nil so that `pop-to-buffer-same-window' calls works in this window
     ;;   otherwise it'll set `window-dedicated-p' to `side' and this will cause `pop-to-buffer-same-window'
     ;;   to open stuff in another window.
     (select-window
      (display-buffer-in-side-window
       buffer
       (list (cons 'side 'right)
             (cons 'slot 0)
             (cons 'window-width 84)
             (cons 'window-parameters (list (cons 'no-delete-other-windows t)
                                            (cons 'no-other-window nil))))))
     nil))

  (defun isamert/remove-window-with-buffer (the-buffer-name)
    "Remove window containing given THE-BUFFER-NAME."
    (mapc (lambda (window)
            (when (string-equal (buffer-name (window-buffer window)) the-buffer-name)
              (delete-window window)))
          (window-list (selected-frame))))

  (defun isamert/toggle-side-buffer-with-file (file-path)
    "Toggle FILE-PATH in a side buffer. The buffer is opened in side window so it can't be accidentaly removed."
    (interactive)
    (let ((fname (file-name-nondirectory file-path)))
    (if (isamert/buffer-visible-p fname)
        (isamert/remove-window-with-buffer fname)
      (isamert/display-buffer-in-side-window
       (save-window-excursion
         (find-file file-path)
         (current-buffer))))))

  (defun isamert/toggle-side-scratch-buffer ()
    "Toggle the scratch buffer in side window.  The buffer is opened in side window so it can't be accidentaly removed."
    (interactive)
    (if (isamert/buffer-visible-p "*scratch*")
        (isamert/remove-window-with-buffer "*scratch*")
      (isamert/display-buffer-in-side-window (get-buffer "*scratch*"))))

  (defun isamert/toggle-side-temp-org-buffer ()
    "Toggle `temp.org` in a side buffer for quick note taking.  The buffer is opened in side window so it can't be accidentaly removed."
    (interactive)
    (isamert/toggle-side-buffer-with-file "~/Documents/notes/temp.org"))

  (defun isamert/toggle-side-bullet-org-buffer ()
    "Toggle `bullet.org` in a side buffer for quick note taking.  The buffer is opened in side window so it can't be accidentaly removed."
    (interactive)
    (isamert/toggle-side-buffer-with-file "~/Documents/notes/bullet.org"))

  (defun isamert/toggle-side-projects-buffer ()
    "Toggle `projects.org` in a side buffer for quick note taking.  The buffer is opened in side window so it can't be accidentaly removed."
    (interactive)
    (isamert/toggle-side-buffer-with-file "~/Documents/notes/projects.org"))

    ;; Toggle temproary buffers
    (evil-leader/set-key
      "ts" 'isamert/toggle-side-scratch-buffer
      "to" 'isamert/toggle-side-temp-org-buffer
      "th" 'isamert/toggle-side-bullet-org-buffer
      "tp" 'isamert/toggle-side-projects-buffer
      "tf" 'treemacs)
#+end_src

** org-babel extension functions
#+BEGIN_SRC emacs-lisp
  (defun isamert/org-babel-remove-all-results nil
    (interactive)
    (goto-char 1)
    (let ((total-removed 0))
      (while (org-babel-next-src-block)
        (when (org-babel-remove-result)
          (setq total-removed (+ total-removed 1))))
      (message (format "%d result blocks are removed." total-removed))))
#+END_SRC

** helm extensions
#+begin_src emacs-lisp
  (defun isamert/helm-projectile-rg-current-project nil
    "Search in current project using ripgrep."
    (interactive)
    (let ((helm-rg-default-directory (projectile-project-root)))
      (helm-rg nil)))

  (defun isamert/helm-projectile-rg-all-projects nil
    "Search in current project using ripgrep."
    (interactive)
    (let ((helm-rg-default-directory (car projectile-project-search-path)))
      (helm-rg nil)))

  (defun isamert/helm-grep-ag-current-project (arg)
    "Search in current project using ag"
    (interactive "P")
    (helm-grep-ag (projectile-project-root) arg))

  (defun isamert/helm-grep-git-grep-current-project (arg)
    "Search in current project using ag"
    (interactive "P")
    (helm-grep-git-1 (projectile-project-root) arg))
#+end_src

** functions for easy indentation switching
- http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html

#+BEGIN_SRC emacs-lisp
(defun isamert/setup-indent (n)
  (interactive "nHow many spaces do you want? ")
  (setq-local tab-width n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local coffee-tab-width n) ; coffeescript
  (setq-local javascript-indent-level n) ; javascript-mode
  (setq-local js-indent-level n) ; js-mode
  ;;(setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
  (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
  (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
  (setq-local css-indent-offset n) ; css-mode
  (setq-local typescript-indent-level n) ; typescript-mode
  (message "OK!"))
#+END_SRC

** Paste screenshots into org-mode buffers
#+begin_src emacs-lisp
  ;; TODO: save images under a predefined place on empty file-path instead of cache (defvar ...)
  (defun isamert/org-attach-image-from-clipboard (file-path)
    (interactive "sSave file to (leave empty to create a temp file): ")
    (let ((file (if (and file-path (not (string-empty-p file-path)))
                    file-path
                  (make-temp-file "~/.cache/org_temp_image_" nil ".png"))))
      (cond
       ((locate-file "xclip" exec-path) (shell-command (format "xclip -selection clipboard -target image/png -out > %s" file)))
       ((locate-file "pngpaste" exec-path) (shell-command (format "pngpaste %s" file)))
       (t (message "Either install xclip (for linux) or pngpaste (for mac) to get this functionality.")))
      (insert (format "#+ATTR_ORG: :width 400\n[[file:%s]]" file))))

  (evil-leader/set-key
    "oP"  'isamert/org-attach-image-from-clipboard)
#+end_src

** Current file functionality
#+begin_src emacs-lisp
  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun isamert/rename-current-file-name-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))

  ;; Slightly modified version of: http://www.ergoemacs.org/emacs/elisp_delete-current-file.html
  (defun isamert/delete-current-file ()
    "Delete the current file and copy it's content to `kill-ring'."
    (interactive)
    (when (y-or-n-p (format "Do you really want to remove this: \"%s\"?" (buffer-file-name)))
      (kill-new (buffer-string))
      (message "Buffer content copied to kill-ring.")
      (when (and (buffer-file-name) (file-exists-p (buffer-file-name)))
        (delete-file (buffer-file-name))
        (message "Deleted file: 「%s」." (buffer-file-name)))
      (let ((buffer-offer-save nil))
        (set-buffer-modified-p nil)
        (kill-buffer (current-buffer)))))
#+end_src

** xah-open-file-at-curser
This is better than =find-file-at-point= because it takes line numbers etc. into account.

#+begin_src emacs-lisp
  (defun xah-open-file-at-cursor ()
    "Open the file path under cursor.
  If there is text selection, uses the text selection for path.
  If the path starts with “http://”, open the URL in browser.
  Input path can be {relative, full path, URL}.
  Path may have a trailing “:‹n›” that indicates line number, or “:‹n›:‹m›” with line and column number. If so, jump to that line number.
  If path does not have a file extension, automatically try with “.el” for elisp files.
  This command is similar to `find-file-at-point' but without prompting for confirmation.

  URL `http://ergoemacs.org/emacs/emacs_open_file_path_fast.html'
  Version 2020-10-17"
    (interactive)
    (let* (
           ($inputStr
            (if (use-region-p)
                (buffer-substring-no-properties (region-beginning) (region-end))
              (let ($p0 $p1 $p2
                        ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
                        ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
                (setq $p0 (point))
                (skip-chars-backward $pathStops)
                (setq $p1 (point))
                (goto-char $p0)
                (skip-chars-forward $pathStops)
                (setq $p2 (point))
                (goto-char $p0)
                (buffer-substring-no-properties $p1 $p2))))
           ($path
            (replace-regexp-in-string
             "^file:///" "/"
             (replace-regexp-in-string
              ":\\'" "" $inputStr))))
      (if (string-match-p "\\`https?://" $path)
          (if (fboundp 'xahsite-url-to-filepath)
              (let (($x (xahsite-url-to-filepath $path)))
                (if (string-match "^http" $x )
                    (browse-url $x)
                  (find-file $x)))
            (progn (browse-url $path)))
        (progn ; not starting “http://”
          (if (string-match "#" $path )
              (let (
                    ( $fpath (substring $path 0 (match-beginning 0)))
                    ( $fractPart (substring $path (1+ (match-beginning 0)))))
                (if (file-exists-p $fpath)
                    (progn
                      (find-file $fpath)
                      (goto-char 1)
                      (search-forward $fractPart ))
                  (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
                    (find-file $fpath))))
            (if (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\(:[0-9]+\\)?\\'" $path)
                (let (
                      ($fpath (match-string 1 $path))
                      ($line-num (string-to-number (match-string 2 $path))))
                  (if (file-exists-p $fpath)
                      (progn
                        (find-file $fpath)
                        (goto-char 1)
                        (forward-line (1- $line-num)))
                    (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
                      (find-file $fpath))))
              (if (file-exists-p $path)
                  (progn ; open f.ts instead of f.js
                    (let (($ext (file-name-extension $path))
                          ($fnamecore (file-name-sans-extension $path)))
                      (if (and (string-equal $ext "js")
                               (file-exists-p (concat $fnamecore ".ts")))
                          (find-file (concat $fnamecore ".ts"))
                        (find-file $path))))
                (if (file-exists-p (concat $path ".el"))
                    (find-file (concat $path ".el"))
                  (when (y-or-n-p (format "file no exist: 「%s」. Create?" $path))
                    (find-file $path ))))))))))

(define-key evil-normal-state-map (kbd "gf") 'xah-open-file-at-cursor)
#+end_src

** YouTube search
I already have a shell script that does search in Youtube using =rofi= as the interface but it does not work on macOS. So this is a tiny wrapper around that, instead of rofi, it uses emacs itself.

#+begin_src emacs-lisp
  (defun isamert/search-youtube (query)
    (interactive "sQuery: ")
    (->>
     (format "menu youtube --out %s" query)
     (shell-command-to-string)
     (s-split "\n")
     (completing-read "Select video to play: ")
     (s-match "https://youtu.be/.*")
     (car)
     (format "mpv %s")
     (start-process-shell-command "mpv-yt" nil)))

  (defalias 'isamert/search-yt 'isamert/search-youtube)
#+end_src
* WELL
Company/work related stuff.

#+begin_src emacs-lisp
  ;; TODO: Maybe just check if it's a Mac or not?
  (defun well/is-well ()
    "Return if current computer is Well computer or not."
    (string= (treemacs-workspace->name (treemacs-current-workspace)) "Well"))
#+end_src

** Automatically insert issue numbers into commit messages
#+begin_src emacs-lisp
  (defun well/git-commit-message-setup ()
    "Insert the JIRA ticket number in front of the commit message.  If it already exists (like for example when you use --amend), does not do anything."
    (let* ((issue-prefix (--> (magit-get-current-branch)
                              (split-string it "-")
                              (string-join (-take 2 it) "-")
                              (if (string-match "/well-he-arbiter/" (projectile-project-root))
                                  (format "[%s] " it)
                                (format "%s - " it))))
           (issue-prefix-exists (save-excursion
                                  (goto-char (point-min))
                                  (search-forward issue-prefix nil t))))
      (when (not issue-prefix-exists)
        (goto-char (point-min))
        (insert issue-prefix))))

  (when (well/is-well)
    (add-hook 'git-commit-setup-hook 'well/git-commit-message-setup))
#+end_src

** Open MR page
#+begin_src emacs-lisp
  (defun isamert/git-link-my-merge-requests ()
    "Open all of my merge requests in browser for the current repository."
    (interactive)
    (browse-url (format "%s/-/merge_requests?scope=all&utf8=✓&state=opened&author_username=%s" (isamert/git-link-homepage) "isamert.well")))

  (evil-leader/set-key
    "glm" 'isamert/git-link-my-merge-requests)
#+end_src

** JS env setup
LSP does not work well with UI projects. So I use tide for UI projects and LSP for backend projects.

#+begin_src emacs-lisp
  (defun well/setup-tide-mode ()
    (interactive)
    (lsp-mode -1)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (flycheck-add-next-checker 'python-flake8 'python-pylint)
    (eldoc-mode +1)
    (highlight-thing-mode -1)
    (tide-hl-identifier-mode +1)
    (lsp-ui-mode +1)
    (company-mode +1))

  (defun well/setup-js ()
    "If it's an UI project, run tide.  Otherwise run lsp."
    (interactive)
    (if (string-match "/ui/" (or (isamert/current-project-root) ""))
        (isamert/setup-indent 2)
        (well/setup-tide-mode)
      (lsp)))

  (when (well/is-well)
    (remove-hook 'js-mode-hook 'lsp)
    (add-hook 'js-mode-hook 'well/setup-js))
#+end_src

** Haskell env setup
#+begin_src emacs-lisp
  (remove-hook 'haskell-mode-hook 'lsp)
  ;; FIXME: following brokes some stuff in org mode, probably need to use flycheck-hook or something
  ;; (add-hook 'haskell-mode-hook (lambda () (flycheck-select-checker 'haskell-hlint)))
#+end_src

** Misc functions
#+begin_src emacs-lisp
  (defun well/open-jira-issue (issue-number)
    (interactive "sIssue number: ")
    (browse-url (format "https://wellco.atlassian.net/browse/%s" issue-number)))

  (defun well/open-jira-issue-at-point ()
    (interactive)
    (well/open-jira-issue (thing-at-point 'symbol)))

  ;; When on ejira header -> open JIRA page
  ;; When in well.org -> go to current headers ejira equivalent
  ;; When thing-at-point is an issue number
  ;;  if arg is non-nil -> open(or create) it on well.org
  ;;  else -> open(or create) it on ejira
  (defun well/jira-dwim (arg)
    (interactive "P")
    (let ((curr-id (format "%s" (thing-at-point 'symbol)))
          (entry-id (org-entry-get nil "ID" t)))
      (cond
       ;; TODO (and arg ...) Goto well.org header containing curr-id, if not create it (use properties like JIRA for well.org)
       ;; TODO (and arg ...) if in well.org header, goto ejira header
       ((org-id-find curr-id) (org-id-goto curr-id))
       (entry-id (well/open-jira-issue entry-id))
       ((s-prefix? "SIR" curr-id)
        (org-id-goto "SIR")
        (end-of-line)
        (org-insert-subheading nil)
        (end-of-line)
        (insert "Placeholder")
        (org-set-property "TYPE" "ejira-story")
        (org-set-property "ID" curr-id)
        (ejira-pull-item-under-point))
       (t (message "No issue found under cursor or this is not a ejira context.")))))

  (evil-leader/set-key "oj" 'well/jira-dwim)
#+end_src

** Misc bindings
#+begin_src emacs-lisp
  (defun isamert/toggle-side-well-org-buffer ()
    "Toggle `well.org` in a side buffer for quick note taking.  The buffer is opened in side window so it can't be accidentaly removed."
    (interactive)
    (isamert/toggle-side-buffer-with-file "~/Documents/notes/well.org"))

  (evil-leader/set-key
    "tw" 'isamert/toggle-side-well-org-buffer)
#+end_src
** Token management
#+begin_src emacs-lisp
  ;; Setup:
  ;;   (well/switch-{development,integration,validation})
  ;;   (well/set-refresh-token)
  ;;
  ;; Getting:
  ;;   (well/access-token)
  ;;   (well/auth-token)


  ;; Customization

  (defcustom well/internal-auth-util-path
    "~/Workspace/projects/shared/awslibrary/lib/auth/InternalAuthUtil.js"
    "Path to InternalAuthUtil.js, see: https://wellco.atlassian.net/wiki/spaces/HA/pages/1344962568/Getting+admin+tokens")

  ;; State

  (defvar well/token-last-update
    nil)

  ;; Code

  (defun well/switch-env (env)
    (setenv "AWS_PROFILE" env)
    (setenv "CI_ENVIRONMENT_NAME" env)
    (when (not (getenv "REFRESH_TOKEN"))
      (well/set-refresh-token)))

  (defun well/switch-development ()
    (interactive)
    (well/switch-env "development"))

  (defun well/switch-integration ()
    (interactive)
    (well/switch-env "integration"))

  (defun well/switch-validation ()
    (interactive)
    (well/switch-env "validation"))

  (defun well/set-refresh-token ()
    (interactive)
    (setenv "REFRESH_TOKEN" (read-string "REFRESH_TOKEN: ")))

  (defun well/refresh-tokens ()
    (interactive)
    (-let [tokens (shell-command-to-string (format "node %s useTokens" well/internal-auth-util-path))]
      (setenv "ACCESS_TOKEN" (cadr (s-match "accessToken:[ \n\t]+'\\(.*\\)'" tokens)))
      (setenv "AUTH_TOKEN" (cadr (s-match "authToken:[ \n\t]+'\\(.*\\)'" tokens)))
      (setq well/token-last-update (string-to-number (format-time-string "%s")))))

  (defun well/tokens ()
    (interactive)
    (when (or (not well/token-last-update)
              (< (+ well/token-last-update 290) (string-to-number (format-time-string "%s"))))
      (well/refresh-tokens))
    `(,(getenv "ACCESS_TOKEN") . ,(getenv "AUTH_TOKEN")))

  (defun well/access-token ()
    (interactive)
    (car (well/tokens)))

  (defun well/auth-token ()
    (interactive)
    (cdr (well/tokens)))
#+end_src
