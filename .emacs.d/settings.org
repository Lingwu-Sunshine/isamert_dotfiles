#+TITLE: Emacs configuration file
#+AUTHOR: İsa Mert Gürbüz
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* Introduction
This is my emacs configuration.
* Preperation
** Load path
Define the load path. (It's for auto-loading .el files)
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/load")
#+END_SRC
** Variables and functions
Some basic variable and function definitions that will be used in configuration.
*** mkdir-if-not
#+BEGIN_SRC emacs-lisp
(defun mkdir-if-not (dir)
"create the DIR if it does not exist"
    (unless (file-exists-p dir)
            (make-directory dir)))
#+END_SRC
*** shackle-window
Here is the [[https://www.reddit.com/r/emacs/comments/345vtl/make_helm_window_at_the_bottom_without_using_any/][source]].
#+BEGIN_SRC emacs-lisp
(defun shackle-window (name size)
"Make the buffer NAME appear at bottom of the window, filling SIZE percent of the window"
  (add-to-list 'display-buffer-alist
               `(,name
                  (display-buffer-in-side-window)
                  (inhibit-same-window . t)
                  (window-height . ,size))))
#+END_SRC
** Package repos
Add ~melpa~ package archive.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(unless package-archive-contents (package-refresh-contents)) ;; Update archives
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t) ;; Make ~:ensure t~ default
(unless (package-installed-p 'use-package) (package-install 'use-package))
#+END_SRC
* Basics
** Sane defaults
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)  ;; Disable backup files
(global-visual-line-mode t)   ;; Wrap long lines
(fset 'yes-or-no-p 'y-or-n-p) ;; Ask y/n instead of yes/no
#+END_SRC

Save recent files.
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+END_SRC
** Better scrolling
*** Better settings for mouse scroll.
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+END_SRC
*** Mouse shortcuts for zooming
#+BEGIN_SRC emacs-lisp
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC
*** Conservative scrolling
If the cursor is at the end of the file, when you scroll emacs does a strange jump. This fixes it.
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100) ;; When cursor reaches end, just scroll line-by-line
#+END_SRC
** Place all backup files in same directory
Instead of having a file that ends with ~ or '# files in same directory, save all backup files in ~/.emacs.d/backups.
#+BEGIN_SRC emacs-lisp
(defconst backup-dir "~/.emacs.d/backups/")
(mkdir-if-not backup-dir)

(setq backup-directory-alist `((".*" . ,backup-dir)))
(setq auto-save-file-name-transforms `((".*" ,backup-dir t)))
#+END_SRC
** Undo tree (Persistent undo and stuff)
- ~undo-tree~ gives a persistent undo even if you close the file.
- Also it keeps undo history as a tree instead of a linear history. ~undo-tree-visualize~ may help.
#+BEGIN_SRC emacs-lisp
(defconst undo-dir "~/.emacs.d/undo/")
(mkdir-if-not undo-dir)

(use-package undo-tree
  :init
    (setq undo-tree-auto-save-history t
          undo-tree-history-directory-alist `((".*" . ,undo-dir)))
  :config
  (global-undo-tree-mode))
#+END_SRC
** Remove trailing space before save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook
          'delete-trailing-whitespace)
#+END_SRC
* Visuals
** General
Hide menubar and toolbar and replace blinking cursor with nice static box cursor.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)                ;; Disable menubar
(tool-bar-mode 0)                ;; Disable toolbar
(blink-cursor-mode 0)            ;; Disable blinking cursor
(scroll-bar-mode -1)             ;; Disable scrollbars
(setq inhibit-startup-message t) ;; Close startup screen
(global-hl-line-mode t)          ;; Highlight current line
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :font "IBM Plex Mono"
                    :weight 'normal
                    :width 'normal
                    :height 105)
#+END_SRC
** Frame title
Make window title contain buffer name so it's easier to identify windows. I use ~rofi~ to switch between windows in my DE, so it helps to have buffer name in window title.
#+BEGIN_SRC emacs-lisp
(setq frame-title-format "%b - emacs")
#+END_SRC
** Theme
Set a nicer theme.
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init
  (load-theme 'spacemacs-dark t))
#+END_SRC
** Parentheses
*** Matching
Just enable parenthesis matching.
#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'parenthesis)
(show-paren-mode 1)
#+END_SRC
*** Rainbow
Colors parantheses depending on their dept.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** 80 column line limit and trailing spaces
This code highlights the portion of line that exceeds 80 columns and trailing spaces.
#+BEGIN_SRC emacs-lisp
(setq whitespace-line-column 80)
(setq whitespace-style '(face empty tabs lines-tail trailing))
(setq whitespace-global-modes '(not org-mode)) ;; Disable in org-mode
(global-whitespace-mode t)
#+END_SRC
** Shackle windows
Make some temproary windows appear at bottom.
#+BEGIN_SRC emacs-lisp
(shackle-window "\\*Help\\*" 0.4)
#+END_SRC
* evil-mode
** Install
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (evil-mode 1))
#+END_SRC
** evil-leader
Enable leader key and bind some keys.
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :init
  (global-evil-leader-mode)
  :config
  (progn
    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
      "SPC" 'helm-M-x
      "e" 'eval-last-sexp
      "r" 'helm-recentf
      "t" 'helm-elscreen
      "b" 'helm-buffers-list
      "g" 'projectile-find-file
      "RET" 'helm-mini)))
#+END_SRC
** evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :init
  (global-evil-surround-mode 1))
#+END_SRC
** Visual line movement
To move between visual lines instead of real lines:
#+BEGIN_SRC emacs-lisp
(setq-default evil-cross-lines t) ;; Make horizontal movement cross lines
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
#+END_SRC
** Change cursor color according to mode
#+BEGIN_SRC emacs-lisp
(setq evil-normal-state-cursor '("green" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-emacs-state-cursor '("red" box))
(setq evil-insert-state-cursor '("red" bar))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
#+END_SRC
* org-mode
** Better defaults
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t) ;; Enable code highlighting in ~SRC~ blocks.
(setq org-ellipsis "..↯")         ;; Replace ... with ..↯ in collapsed sections
#+END_SRC
** Auto indent subsections
Automatically invoke ~org-indent-mode~ which gives nice little indentation under subsections. It makes reading easier.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)
#+END_SRC
** Nice bullets
Make headings look better with nice bullets. It also adjusts the size of headings according to their level.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Babel
*** Load languages
These are the languages that can be run in codeblocks.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((scheme . t)
   (python . t)))
#+END_SRC
*** Don't ask permissions for evaluating code blocks
#+BEGIN_SRC
(setq org-confirm-babel-evaluate nil)
#+END_SRC
*** Set default scheme implementation as ~guile~
#+BEGIN_SRC emacs-lisp
(use-package geiser
  :init
  (setq geiser-default-implementation 'guile))
#+END_SRC
** Exports
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC
* Other packages
** which-key
A package that shows key combinations. (for example press C-x and wait) It also works with ~evil-leader~, just press leader key and wait to see your options.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
** key-chord
*** Install and configure
#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :init
  (setq key-chord-one-key-delay 0.3    ;; 0.3 secons delay for hitting same key (eg. aa)
        key-chord-two-keys-delay 0.25) ;; delay hitting two different keys (eg. jk)
  :config
  (key-chord-mode 1))
#+END_SRC
*** Bindings
#+BEGIN_SRC emacs-lisp
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state) ;; jk returns to norman mode, from insert mode
#+END_SRC
** avy
avy is very similar to ~vim-easymotion~. It simply jumps to a visible text using a given char.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :init
  (setq avy-keys '(?q ?w ?e ?r ?a ?s ?d ?f ?j ?k ?l ?u ?i ?o ?p)))
#+END_SRC
*** Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "s") 'avy-goto-char)   ;; Go to any char
(define-key evil-normal-state-map (kbd "S") 'avy-goto-word-1) ;; Go to beginning of a word
#+END_SRC
** projectile
A project management tool. I set a project path below and make sure projectile scans that directory for projects.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (setq projectile-completion-system 'helm
        projectile-enable-caching t
        projectile-project-search-path '("~/Workspace/projects")) ;; This may take more paths as argument
  :config
  (progn
    (projectile-discover-projects-in-search-path)
    (setq projectile-globally-ignored-files (append '("Cargo.lock"))
          projectile-globally-ignored-directories (append '(".stack-work" "target"))
          projectile-globally-ignored-file-suffixes (append '("~" ".rs.bk")))
    (projectile-mode)))
;; FIXME: ignored stuff still showing up in projectile-find-file
#+END_SRC
** helm
*** Enable and set defaults
#+BEGIN_SRC emacs-lisp
(use-package helm
  :init
  (setq helm-mode-fuzzy-match t
        helm-completion-in-region-fuzzy-match t
        helm-candidate-number-limit 100
        projectile-completion-system 'helm)
  :config
  (progn
    (helm-mode 1)
    (helm-adaptive-mode 1)
    (shackle-window "\\*helm*" 0.35))) ;; make helm windows appear at bottom
#+END_SRC
*** Extension packages
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop)
#+END_SRC
*** Better selection
Set ~<tab>~ and ~Alt-j~ for selecting next result and ~<backtab>~ and ~Alt-k~ for selecting previous result.
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "<tab>") 'helm-next-line)
(define-key helm-map (kbd "<backtab>") 'helm-previous-line)
(define-key helm-map (kbd "M-j") 'helm-next-line)
(define-key helm-map (kbd "M-k") 'helm-previous-line)
#+END_SRC
* Keybindings
- For leader key bindings, see: [[*evil-leader][evil-leader]]
- For key-chord  bindings, see: [[*Bindings][key-chord/bindings]]
- For avy        bindings, see: [[*Bindings][avy/bindings]]
** Some general keybindings
| Key   | Action              |
|-------+---------------------|
| <ESC> | quit current action |
| C-s   | save buffer         |

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-s") 'save-buffer)
#+END_SRC
** Better split management
- A-- splits below, A-\ splits right.
- A-h,j,k,l to switch between splits.
- A-H,J,K,L shrink, enlarge split.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "M-\\") 'split-window-right)
(define-key evil-normal-state-map (kbd "M--") 'split-window-below)
(define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)
(define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "M-J") 'enlarge-window)
(define-key evil-normal-state-map (kbd "M-K") 'shrink-window)
(define-key evil-normal-state-map (kbd "M-L") 'enlarge-window-horizontally)
(define-key evil-normal-state-map (kbd "M-H") 'shrink-window-horizontally)
#+END_SRC
** Move in insert mode
- Use A-h,j,k,l to move in insert mode.
#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "M-l") 'forward-char)
(define-key evil-insert-state-map (kbd "M-h") 'backward-char)
(define-key evil-insert-state-map (kbd "M-j") 'next-line)
(define-key evil-insert-state-map (kbd "M-k") 'previous-line)
#+END_SRC
** evil bindings for org-mode
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal org-mode-map
  "[" 'org-previous-visible-heading
  "]" 'org-next-visible-heading
  ">" 'org-shiftmetaright
  "<" 'org-shiftmetaleft
  "-" 'org-cycle-list-bullet
  "H" 'org-shiftleft
  "J" 'org-shiftdown
  "K" 'org-shiftup
  "L" 'org-shiftright
  "t" 'org-todo
  "T" 'org-set-tags
  "E" 'org-ctrl-c-ctrl-c
  "O" 'org-open-at-point
  "Y" 'org-store-link)
#+END_SRC
